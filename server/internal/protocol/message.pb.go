// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0
// source: message.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Chroma int32

const (
	Chroma_I420 Chroma = 0
	Chroma_I444 Chroma = 1
)

// Enum value maps for Chroma.
var (
	Chroma_name = map[int32]string{
		0: "I420",
		1: "I444",
	}
	Chroma_value = map[string]int32{
		"I420": 0,
		"I444": 1,
	}
)

func (x Chroma) Enum() *Chroma {
	p := new(Chroma)
	*p = x
	return p
}

func (x Chroma) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chroma) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (Chroma) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x Chroma) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chroma.Descriptor instead.
func (Chroma) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type KeyboardMode int32

const (
	KeyboardMode_Legacy    KeyboardMode = 0
	KeyboardMode_Map       KeyboardMode = 1
	KeyboardMode_Translate KeyboardMode = 2
	KeyboardMode_Auto      KeyboardMode = 3
)

// Enum value maps for KeyboardMode.
var (
	KeyboardMode_name = map[int32]string{
		0: "Legacy",
		1: "Map",
		2: "Translate",
		3: "Auto",
	}
	KeyboardMode_value = map[string]int32{
		"Legacy":    0,
		"Map":       1,
		"Translate": 2,
		"Auto":      3,
	}
)

func (x KeyboardMode) Enum() *KeyboardMode {
	p := new(KeyboardMode)
	*p = x
	return p
}

func (x KeyboardMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyboardMode) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (KeyboardMode) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x KeyboardMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyboardMode.Descriptor instead.
func (KeyboardMode) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

type ControlKey int32

const (
	ControlKey_Unknown   ControlKey = 0
	ControlKey_Alt       ControlKey = 1
	ControlKey_Backspace ControlKey = 2
	ControlKey_CapsLock  ControlKey = 3
	ControlKey_Control   ControlKey = 4
	ControlKey_Delete    ControlKey = 5
	ControlKey_DownArrow ControlKey = 6
	ControlKey_End       ControlKey = 7
	ControlKey_Escape    ControlKey = 8
	ControlKey_F1        ControlKey = 9
	ControlKey_F10       ControlKey = 10
	ControlKey_F11       ControlKey = 11
	ControlKey_F12       ControlKey = 12
	ControlKey_F2        ControlKey = 13
	ControlKey_F3        ControlKey = 14
	ControlKey_F4        ControlKey = 15
	ControlKey_F5        ControlKey = 16
	ControlKey_F6        ControlKey = 17
	ControlKey_F7        ControlKey = 18
	ControlKey_F8        ControlKey = 19
	ControlKey_F9        ControlKey = 20
	ControlKey_Home      ControlKey = 21
	ControlKey_LeftArrow ControlKey = 22
	// / meta key (also known as "windows"; "super"; and "command")
	ControlKey_Meta ControlKey = 23
	// / option key on macOS (alt key on Linux and Windows)
	ControlKey_Option      ControlKey = 24 // deprecated, use Alt instead
	ControlKey_PageDown    ControlKey = 25
	ControlKey_PageUp      ControlKey = 26
	ControlKey_Return      ControlKey = 27
	ControlKey_RightArrow  ControlKey = 28
	ControlKey_Shift       ControlKey = 29
	ControlKey_Space       ControlKey = 30
	ControlKey_Tab         ControlKey = 31
	ControlKey_UpArrow     ControlKey = 32
	ControlKey_Numpad0     ControlKey = 33
	ControlKey_Numpad1     ControlKey = 34
	ControlKey_Numpad2     ControlKey = 35
	ControlKey_Numpad3     ControlKey = 36
	ControlKey_Numpad4     ControlKey = 37
	ControlKey_Numpad5     ControlKey = 38
	ControlKey_Numpad6     ControlKey = 39
	ControlKey_Numpad7     ControlKey = 40
	ControlKey_Numpad8     ControlKey = 41
	ControlKey_Numpad9     ControlKey = 42
	ControlKey_Cancel      ControlKey = 43
	ControlKey_Clear       ControlKey = 44
	ControlKey_Menu        ControlKey = 45 // deprecated, use Alt instead
	ControlKey_Pause       ControlKey = 46
	ControlKey_Kana        ControlKey = 47
	ControlKey_Hangul      ControlKey = 48
	ControlKey_Junja       ControlKey = 49
	ControlKey_Final       ControlKey = 50
	ControlKey_Hanja       ControlKey = 51
	ControlKey_Kanji       ControlKey = 52
	ControlKey_Convert     ControlKey = 53
	ControlKey_Select      ControlKey = 54
	ControlKey_Print       ControlKey = 55
	ControlKey_Execute     ControlKey = 56
	ControlKey_Snapshot    ControlKey = 57
	ControlKey_Insert      ControlKey = 58
	ControlKey_Help        ControlKey = 59
	ControlKey_Sleep       ControlKey = 60
	ControlKey_Separator   ControlKey = 61
	ControlKey_Scroll      ControlKey = 62
	ControlKey_NumLock     ControlKey = 63
	ControlKey_RWin        ControlKey = 64
	ControlKey_Apps        ControlKey = 65
	ControlKey_Multiply    ControlKey = 66
	ControlKey_Add         ControlKey = 67
	ControlKey_Subtract    ControlKey = 68
	ControlKey_Decimal     ControlKey = 69
	ControlKey_Divide      ControlKey = 70
	ControlKey_Equals      ControlKey = 71
	ControlKey_NumpadEnter ControlKey = 72
	ControlKey_RShift      ControlKey = 73
	ControlKey_RControl    ControlKey = 74
	ControlKey_RAlt        ControlKey = 75
	ControlKey_VolumeMute  ControlKey = 76 // mainly used on mobile devices as controlled side
	ControlKey_VolumeUp    ControlKey = 77
	ControlKey_VolumeDown  ControlKey = 78
	ControlKey_Power       ControlKey = 79 // mainly used on mobile devices as controlled side
	ControlKey_CtrlAltDel  ControlKey = 100
	ControlKey_LockScreen  ControlKey = 101
)

// Enum value maps for ControlKey.
var (
	ControlKey_name = map[int32]string{
		0:   "Unknown",
		1:   "Alt",
		2:   "Backspace",
		3:   "CapsLock",
		4:   "Control",
		5:   "Delete",
		6:   "DownArrow",
		7:   "End",
		8:   "Escape",
		9:   "F1",
		10:  "F10",
		11:  "F11",
		12:  "F12",
		13:  "F2",
		14:  "F3",
		15:  "F4",
		16:  "F5",
		17:  "F6",
		18:  "F7",
		19:  "F8",
		20:  "F9",
		21:  "Home",
		22:  "LeftArrow",
		23:  "Meta",
		24:  "Option",
		25:  "PageDown",
		26:  "PageUp",
		27:  "Return",
		28:  "RightArrow",
		29:  "Shift",
		30:  "Space",
		31:  "Tab",
		32:  "UpArrow",
		33:  "Numpad0",
		34:  "Numpad1",
		35:  "Numpad2",
		36:  "Numpad3",
		37:  "Numpad4",
		38:  "Numpad5",
		39:  "Numpad6",
		40:  "Numpad7",
		41:  "Numpad8",
		42:  "Numpad9",
		43:  "Cancel",
		44:  "Clear",
		45:  "Menu",
		46:  "Pause",
		47:  "Kana",
		48:  "Hangul",
		49:  "Junja",
		50:  "Final",
		51:  "Hanja",
		52:  "Kanji",
		53:  "Convert",
		54:  "Select",
		55:  "Print",
		56:  "Execute",
		57:  "Snapshot",
		58:  "Insert",
		59:  "Help",
		60:  "Sleep",
		61:  "Separator",
		62:  "Scroll",
		63:  "NumLock",
		64:  "RWin",
		65:  "Apps",
		66:  "Multiply",
		67:  "Add",
		68:  "Subtract",
		69:  "Decimal",
		70:  "Divide",
		71:  "Equals",
		72:  "NumpadEnter",
		73:  "RShift",
		74:  "RControl",
		75:  "RAlt",
		76:  "VolumeMute",
		77:  "VolumeUp",
		78:  "VolumeDown",
		79:  "Power",
		100: "CtrlAltDel",
		101: "LockScreen",
	}
	ControlKey_value = map[string]int32{
		"Unknown":     0,
		"Alt":         1,
		"Backspace":   2,
		"CapsLock":    3,
		"Control":     4,
		"Delete":      5,
		"DownArrow":   6,
		"End":         7,
		"Escape":      8,
		"F1":          9,
		"F10":         10,
		"F11":         11,
		"F12":         12,
		"F2":          13,
		"F3":          14,
		"F4":          15,
		"F5":          16,
		"F6":          17,
		"F7":          18,
		"F8":          19,
		"F9":          20,
		"Home":        21,
		"LeftArrow":   22,
		"Meta":        23,
		"Option":      24,
		"PageDown":    25,
		"PageUp":      26,
		"Return":      27,
		"RightArrow":  28,
		"Shift":       29,
		"Space":       30,
		"Tab":         31,
		"UpArrow":     32,
		"Numpad0":     33,
		"Numpad1":     34,
		"Numpad2":     35,
		"Numpad3":     36,
		"Numpad4":     37,
		"Numpad5":     38,
		"Numpad6":     39,
		"Numpad7":     40,
		"Numpad8":     41,
		"Numpad9":     42,
		"Cancel":      43,
		"Clear":       44,
		"Menu":        45,
		"Pause":       46,
		"Kana":        47,
		"Hangul":      48,
		"Junja":       49,
		"Final":       50,
		"Hanja":       51,
		"Kanji":       52,
		"Convert":     53,
		"Select":      54,
		"Print":       55,
		"Execute":     56,
		"Snapshot":    57,
		"Insert":      58,
		"Help":        59,
		"Sleep":       60,
		"Separator":   61,
		"Scroll":      62,
		"NumLock":     63,
		"RWin":        64,
		"Apps":        65,
		"Multiply":    66,
		"Add":         67,
		"Subtract":    68,
		"Decimal":     69,
		"Divide":      70,
		"Equals":      71,
		"NumpadEnter": 72,
		"RShift":      73,
		"RControl":    74,
		"RAlt":        75,
		"VolumeMute":  76,
		"VolumeUp":    77,
		"VolumeDown":  78,
		"Power":       79,
		"CtrlAltDel":  100,
		"LockScreen":  101,
	}
)

func (x ControlKey) Enum() *ControlKey {
	p := new(ControlKey)
	*p = x
	return p
}

func (x ControlKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlKey) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[2].Descriptor()
}

func (ControlKey) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[2]
}

func (x ControlKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlKey.Descriptor instead.
func (ControlKey) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

type ClipboardFormat int32

const (
	ClipboardFormat_Text      ClipboardFormat = 0
	ClipboardFormat_Rtf       ClipboardFormat = 1
	ClipboardFormat_Html      ClipboardFormat = 2
	ClipboardFormat_ImageRgba ClipboardFormat = 21
	ClipboardFormat_ImagePng  ClipboardFormat = 22
	ClipboardFormat_ImageSvg  ClipboardFormat = 23
	ClipboardFormat_Special   ClipboardFormat = 31
)

// Enum value maps for ClipboardFormat.
var (
	ClipboardFormat_name = map[int32]string{
		0:  "Text",
		1:  "Rtf",
		2:  "Html",
		21: "ImageRgba",
		22: "ImagePng",
		23: "ImageSvg",
		31: "Special",
	}
	ClipboardFormat_value = map[string]int32{
		"Text":      0,
		"Rtf":       1,
		"Html":      2,
		"ImageRgba": 21,
		"ImagePng":  22,
		"ImageSvg":  23,
		"Special":   31,
	}
)

func (x ClipboardFormat) Enum() *ClipboardFormat {
	p := new(ClipboardFormat)
	*p = x
	return p
}

func (x ClipboardFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClipboardFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[3].Descriptor()
}

func (ClipboardFormat) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[3]
}

func (x ClipboardFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClipboardFormat.Descriptor instead.
func (ClipboardFormat) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

type FileType int32

const (
	FileType_Dir      FileType = 0
	FileType_DirLink  FileType = 2
	FileType_DirDrive FileType = 3
	FileType_File     FileType = 4
	FileType_FileLink FileType = 5
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "Dir",
		2: "DirLink",
		3: "DirDrive",
		4: "File",
		5: "FileLink",
	}
	FileType_value = map[string]int32{
		"Dir":      0,
		"DirLink":  2,
		"DirDrive": 3,
		"File":     4,
		"FileLink": 5,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[4].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[4]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

type ImageQuality int32

const (
	ImageQuality_NotSet   ImageQuality = 0
	ImageQuality_Low      ImageQuality = 2
	ImageQuality_Balanced ImageQuality = 3
	ImageQuality_Best     ImageQuality = 4
)

// Enum value maps for ImageQuality.
var (
	ImageQuality_name = map[int32]string{
		0: "NotSet",
		2: "Low",
		3: "Balanced",
		4: "Best",
	}
	ImageQuality_value = map[string]int32{
		"NotSet":   0,
		"Low":      2,
		"Balanced": 3,
		"Best":     4,
	}
)

func (x ImageQuality) Enum() *ImageQuality {
	p := new(ImageQuality)
	*p = x
	return p
}

func (x ImageQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[5].Descriptor()
}

func (ImageQuality) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[5]
}

func (x ImageQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageQuality.Descriptor instead.
func (ImageQuality) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

type PermissionInfo_Permission int32

const (
	PermissionInfo_Keyboard   PermissionInfo_Permission = 0
	PermissionInfo_Clipboard  PermissionInfo_Permission = 2
	PermissionInfo_Audio      PermissionInfo_Permission = 3
	PermissionInfo_File       PermissionInfo_Permission = 4
	PermissionInfo_Restart    PermissionInfo_Permission = 5
	PermissionInfo_Recording  PermissionInfo_Permission = 6
	PermissionInfo_BlockInput PermissionInfo_Permission = 7
	PermissionInfo_Camera     PermissionInfo_Permission = 8
)

// Enum value maps for PermissionInfo_Permission.
var (
	PermissionInfo_Permission_name = map[int32]string{
		0: "Keyboard",
		2: "Clipboard",
		3: "Audio",
		4: "File",
		5: "Restart",
		6: "Recording",
		7: "BlockInput",
		8: "Camera",
	}
	PermissionInfo_Permission_value = map[string]int32{
		"Keyboard":   0,
		"Clipboard":  2,
		"Audio":      3,
		"File":       4,
		"Restart":    5,
		"Recording":  6,
		"BlockInput": 7,
		"Camera":     8,
	}
)

func (x PermissionInfo_Permission) Enum() *PermissionInfo_Permission {
	p := new(PermissionInfo_Permission)
	*p = x
	return p
}

func (x PermissionInfo_Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionInfo_Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[6].Descriptor()
}

func (PermissionInfo_Permission) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[6]
}

func (x PermissionInfo_Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionInfo_Permission.Descriptor instead.
func (PermissionInfo_Permission) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{70, 0}
}

type SupportedDecoding_PreferCodec int32

const (
	SupportedDecoding_Auto SupportedDecoding_PreferCodec = 0
	SupportedDecoding_VP9  SupportedDecoding_PreferCodec = 1
	SupportedDecoding_H264 SupportedDecoding_PreferCodec = 2
	SupportedDecoding_H265 SupportedDecoding_PreferCodec = 3
	SupportedDecoding_VP8  SupportedDecoding_PreferCodec = 4
	SupportedDecoding_AV1  SupportedDecoding_PreferCodec = 5
)

// Enum value maps for SupportedDecoding_PreferCodec.
var (
	SupportedDecoding_PreferCodec_name = map[int32]string{
		0: "Auto",
		1: "VP9",
		2: "H264",
		3: "H265",
		4: "VP8",
		5: "AV1",
	}
	SupportedDecoding_PreferCodec_value = map[string]int32{
		"Auto": 0,
		"VP9":  1,
		"H264": 2,
		"H265": 3,
		"VP8":  4,
		"AV1":  5,
	}
)

func (x SupportedDecoding_PreferCodec) Enum() *SupportedDecoding_PreferCodec {
	p := new(SupportedDecoding_PreferCodec)
	*p = x
	return p
}

func (x SupportedDecoding_PreferCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupportedDecoding_PreferCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[7].Descriptor()
}

func (SupportedDecoding_PreferCodec) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[7]
}

func (x SupportedDecoding_PreferCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupportedDecoding_PreferCodec.Descriptor instead.
func (SupportedDecoding_PreferCodec) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{71, 0}
}

type OptionMessage_BoolOption int32

const (
	OptionMessage_NotSet OptionMessage_BoolOption = 0
	OptionMessage_No     OptionMessage_BoolOption = 1
	OptionMessage_Yes    OptionMessage_BoolOption = 2
)

// Enum value maps for OptionMessage_BoolOption.
var (
	OptionMessage_BoolOption_name = map[int32]string{
		0: "NotSet",
		1: "No",
		2: "Yes",
	}
	OptionMessage_BoolOption_value = map[string]int32{
		"NotSet": 0,
		"No":     1,
		"Yes":    2,
	}
)

func (x OptionMessage_BoolOption) Enum() *OptionMessage_BoolOption {
	p := new(OptionMessage_BoolOption)
	*p = x
	return p
}

func (x OptionMessage_BoolOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionMessage_BoolOption) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[8].Descriptor()
}

func (OptionMessage_BoolOption) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[8]
}

func (x OptionMessage_BoolOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionMessage_BoolOption.Descriptor instead.
func (OptionMessage_BoolOption) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{72, 0}
}

// no need to consider block input by someone else
type BackNotification_BlockInputState int32

const (
	BackNotification_BlkStateUnknown BackNotification_BlockInputState = 0
	BackNotification_BlkOnSucceeded  BackNotification_BlockInputState = 2
	BackNotification_BlkOnFailed     BackNotification_BlockInputState = 3
	BackNotification_BlkOffSucceeded BackNotification_BlockInputState = 4
	BackNotification_BlkOffFailed    BackNotification_BlockInputState = 5
)

// Enum value maps for BackNotification_BlockInputState.
var (
	BackNotification_BlockInputState_name = map[int32]string{
		0: "BlkStateUnknown",
		2: "BlkOnSucceeded",
		3: "BlkOnFailed",
		4: "BlkOffSucceeded",
		5: "BlkOffFailed",
	}
	BackNotification_BlockInputState_value = map[string]int32{
		"BlkStateUnknown": 0,
		"BlkOnSucceeded":  2,
		"BlkOnFailed":     3,
		"BlkOffSucceeded": 4,
		"BlkOffFailed":    5,
	}
)

func (x BackNotification_BlockInputState) Enum() *BackNotification_BlockInputState {
	p := new(BackNotification_BlockInputState)
	*p = x
	return p
}

func (x BackNotification_BlockInputState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackNotification_BlockInputState) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[9].Descriptor()
}

func (BackNotification_BlockInputState) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[9]
}

func (x BackNotification_BlockInputState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackNotification_BlockInputState.Descriptor instead.
func (BackNotification_BlockInputState) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{79, 0}
}

type BackNotification_PrivacyModeState int32

const (
	BackNotification_PrvStateUnknown BackNotification_PrivacyModeState = 0
	// Privacy mode on by someone else
	BackNotification_PrvOnByOther BackNotification_PrivacyModeState = 2
	// Privacy mode is not supported on the remote side
	BackNotification_PrvNotSupported BackNotification_PrivacyModeState = 3
	// Privacy mode on by self
	BackNotification_PrvOnSucceeded BackNotification_PrivacyModeState = 4
	// Privacy mode on by self, but denied
	BackNotification_PrvOnFailedDenied BackNotification_PrivacyModeState = 5
	// Some plugins are not found
	BackNotification_PrvOnFailedPlugin BackNotification_PrivacyModeState = 6
	// Privacy mode on by self, but failed
	BackNotification_PrvOnFailed BackNotification_PrivacyModeState = 7
	// Privacy mode off by self
	BackNotification_PrvOffSucceeded BackNotification_PrivacyModeState = 8
	// Ctrl + P
	BackNotification_PrvOffByPeer BackNotification_PrivacyModeState = 9
	// Privacy mode off by self, but failed
	BackNotification_PrvOffFailed  BackNotification_PrivacyModeState = 10
	BackNotification_PrvOffUnknown BackNotification_PrivacyModeState = 11
)

// Enum value maps for BackNotification_PrivacyModeState.
var (
	BackNotification_PrivacyModeState_name = map[int32]string{
		0:  "PrvStateUnknown",
		2:  "PrvOnByOther",
		3:  "PrvNotSupported",
		4:  "PrvOnSucceeded",
		5:  "PrvOnFailedDenied",
		6:  "PrvOnFailedPlugin",
		7:  "PrvOnFailed",
		8:  "PrvOffSucceeded",
		9:  "PrvOffByPeer",
		10: "PrvOffFailed",
		11: "PrvOffUnknown",
	}
	BackNotification_PrivacyModeState_value = map[string]int32{
		"PrvStateUnknown":   0,
		"PrvOnByOther":      2,
		"PrvNotSupported":   3,
		"PrvOnSucceeded":    4,
		"PrvOnFailedDenied": 5,
		"PrvOnFailedPlugin": 6,
		"PrvOnFailed":       7,
		"PrvOffSucceeded":   8,
		"PrvOffByPeer":      9,
		"PrvOffFailed":      10,
		"PrvOffUnknown":     11,
	}
)

func (x BackNotification_PrivacyModeState) Enum() *BackNotification_PrivacyModeState {
	p := new(BackNotification_PrivacyModeState)
	*p = x
	return p
}

func (x BackNotification_PrivacyModeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackNotification_PrivacyModeState) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[10].Descriptor()
}

func (BackNotification_PrivacyModeState) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[10]
}

func (x BackNotification_PrivacyModeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackNotification_PrivacyModeState.Descriptor instead.
func (BackNotification_PrivacyModeState) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{79, 1}
}

type EncodedVideoFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Key           bool                   `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
	Pts           int64                  `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodedVideoFrame) Reset() {
	*x = EncodedVideoFrame{}
	mi := &file_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodedVideoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedVideoFrame) ProtoMessage() {}

func (x *EncodedVideoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedVideoFrame.ProtoReflect.Descriptor instead.
func (*EncodedVideoFrame) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *EncodedVideoFrame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EncodedVideoFrame) GetKey() bool {
	if x != nil {
		return x.Key
	}
	return false
}

func (x *EncodedVideoFrame) GetPts() int64 {
	if x != nil {
		return x.Pts
	}
	return 0
}

type EncodedVideoFrames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Frames        []*EncodedVideoFrame   `protobuf:"bytes,1,rep,name=frames,proto3" json:"frames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodedVideoFrames) Reset() {
	*x = EncodedVideoFrames{}
	mi := &file_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodedVideoFrames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodedVideoFrames) ProtoMessage() {}

func (x *EncodedVideoFrames) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodedVideoFrames.ProtoReflect.Descriptor instead.
func (*EncodedVideoFrames) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *EncodedVideoFrames) GetFrames() []*EncodedVideoFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

type RGB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Compress      bool                   `protobuf:"varint,1,opt,name=compress,proto3" json:"compress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RGB) Reset() {
	*x = RGB{}
	mi := &file_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RGB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGB) ProtoMessage() {}

func (x *RGB) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGB.ProtoReflect.Descriptor instead.
func (*RGB) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *RGB) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

// planes data send directly in binary for better use arraybuffer on web
type YUV struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Compress      bool                   `protobuf:"varint,1,opt,name=compress,proto3" json:"compress,omitempty"`
	Stride        int32                  `protobuf:"varint,2,opt,name=stride,proto3" json:"stride,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YUV) Reset() {
	*x = YUV{}
	mi := &file_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YUV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YUV) ProtoMessage() {}

func (x *YUV) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YUV.ProtoReflect.Descriptor instead.
func (*YUV) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *YUV) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *YUV) GetStride() int32 {
	if x != nil {
		return x.Stride
	}
	return 0
}

type VideoFrame struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*VideoFrame_Vp9S
	//	*VideoFrame_Rgb
	//	*VideoFrame_Yuv
	//	*VideoFrame_H264S
	//	*VideoFrame_H265S
	//	*VideoFrame_Vp8S
	//	*VideoFrame_Av1S
	Union         isVideoFrame_Union `protobuf_oneof:"union"`
	Display       int32              `protobuf:"varint,14,opt,name=display,proto3" json:"display,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoFrame) Reset() {
	*x = VideoFrame{}
	mi := &file_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrame) ProtoMessage() {}

func (x *VideoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrame.ProtoReflect.Descriptor instead.
func (*VideoFrame) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *VideoFrame) GetUnion() isVideoFrame_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *VideoFrame) GetVp9S() *EncodedVideoFrames {
	if x != nil {
		if x, ok := x.Union.(*VideoFrame_Vp9S); ok {
			return x.Vp9S
		}
	}
	return nil
}

func (x *VideoFrame) GetRgb() *RGB {
	if x != nil {
		if x, ok := x.Union.(*VideoFrame_Rgb); ok {
			return x.Rgb
		}
	}
	return nil
}

func (x *VideoFrame) GetYuv() *YUV {
	if x != nil {
		if x, ok := x.Union.(*VideoFrame_Yuv); ok {
			return x.Yuv
		}
	}
	return nil
}

func (x *VideoFrame) GetH264S() *EncodedVideoFrames {
	if x != nil {
		if x, ok := x.Union.(*VideoFrame_H264S); ok {
			return x.H264S
		}
	}
	return nil
}

func (x *VideoFrame) GetH265S() *EncodedVideoFrames {
	if x != nil {
		if x, ok := x.Union.(*VideoFrame_H265S); ok {
			return x.H265S
		}
	}
	return nil
}

func (x *VideoFrame) GetVp8S() *EncodedVideoFrames {
	if x != nil {
		if x, ok := x.Union.(*VideoFrame_Vp8S); ok {
			return x.Vp8S
		}
	}
	return nil
}

func (x *VideoFrame) GetAv1S() *EncodedVideoFrames {
	if x != nil {
		if x, ok := x.Union.(*VideoFrame_Av1S); ok {
			return x.Av1S
		}
	}
	return nil
}

func (x *VideoFrame) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

type isVideoFrame_Union interface {
	isVideoFrame_Union()
}

type VideoFrame_Vp9S struct {
	Vp9S *EncodedVideoFrames `protobuf:"bytes,6,opt,name=vp9s,proto3,oneof"`
}

type VideoFrame_Rgb struct {
	Rgb *RGB `protobuf:"bytes,7,opt,name=rgb,proto3,oneof"`
}

type VideoFrame_Yuv struct {
	Yuv *YUV `protobuf:"bytes,8,opt,name=yuv,proto3,oneof"`
}

type VideoFrame_H264S struct {
	H264S *EncodedVideoFrames `protobuf:"bytes,10,opt,name=h264s,proto3,oneof"`
}

type VideoFrame_H265S struct {
	H265S *EncodedVideoFrames `protobuf:"bytes,11,opt,name=h265s,proto3,oneof"`
}

type VideoFrame_Vp8S struct {
	Vp8S *EncodedVideoFrames `protobuf:"bytes,12,opt,name=vp8s,proto3,oneof"`
}

type VideoFrame_Av1S struct {
	Av1S *EncodedVideoFrames `protobuf:"bytes,13,opt,name=av1s,proto3,oneof"`
}

func (*VideoFrame_Vp9S) isVideoFrame_Union() {}

func (*VideoFrame_Rgb) isVideoFrame_Union() {}

func (*VideoFrame_Yuv) isVideoFrame_Union() {}

func (*VideoFrame_H264S) isVideoFrame_Union() {}

func (*VideoFrame_H265S) isVideoFrame_Union() {}

func (*VideoFrame_Vp8S) isVideoFrame_Union() {}

func (*VideoFrame_Av1S) isVideoFrame_Union() {}

type IdPk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pk            []byte                 `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdPk) Reset() {
	*x = IdPk{}
	mi := &file_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdPk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdPk) ProtoMessage() {}

func (x *IdPk) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdPk.ProtoReflect.Descriptor instead.
func (*IdPk) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *IdPk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdPk) GetPk() []byte {
	if x != nil {
		return x.Pk
	}
	return nil
}

type DisplayInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	X                  int32                  `protobuf:"zigzag32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                  int32                  `protobuf:"zigzag32,2,opt,name=y,proto3" json:"y,omitempty"`
	Width              int32                  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height             int32                  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Name               string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Online             bool                   `protobuf:"varint,6,opt,name=online,proto3" json:"online,omitempty"`
	CursorEmbedded     bool                   `protobuf:"varint,7,opt,name=cursor_embedded,json=cursorEmbedded,proto3" json:"cursor_embedded,omitempty"`
	OriginalResolution *Resolution            `protobuf:"bytes,8,opt,name=original_resolution,json=originalResolution,proto3" json:"original_resolution,omitempty"`
	Scale              float64                `protobuf:"fixed64,9,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DisplayInfo) Reset() {
	*x = DisplayInfo{}
	mi := &file_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayInfo) ProtoMessage() {}

func (x *DisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayInfo.ProtoReflect.Descriptor instead.
func (*DisplayInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *DisplayInfo) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *DisplayInfo) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *DisplayInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DisplayInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *DisplayInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DisplayInfo) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *DisplayInfo) GetCursorEmbedded() bool {
	if x != nil {
		return x.CursorEmbedded
	}
	return false
}

func (x *DisplayInfo) GetOriginalResolution() *Resolution {
	if x != nil {
		return x.OriginalResolution
	}
	return nil
}

func (x *DisplayInfo) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type PortForward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortForward) Reset() {
	*x = PortForward{}
	mi := &file_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForward) ProtoMessage() {}

func (x *PortForward) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForward.ProtoReflect.Descriptor instead.
func (*PortForward) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *PortForward) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PortForward) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type FileTransfer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dir           string                 `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	ShowHidden    bool                   `protobuf:"varint,2,opt,name=show_hidden,json=showHidden,proto3" json:"show_hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransfer) Reset() {
	*x = FileTransfer{}
	mi := &file_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransfer) ProtoMessage() {}

func (x *FileTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransfer.ProtoReflect.Descriptor instead.
func (*FileTransfer) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *FileTransfer) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *FileTransfer) GetShowHidden() bool {
	if x != nil {
		return x.ShowHidden
	}
	return false
}

type ViewCamera struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewCamera) Reset() {
	*x = ViewCamera{}
	mi := &file_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewCamera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewCamera) ProtoMessage() {}

func (x *ViewCamera) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewCamera.ProtoReflect.Descriptor instead.
func (*ViewCamera) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

type OSLogin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OSLogin) Reset() {
	*x = OSLogin{}
	mi := &file_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSLogin) ProtoMessage() {}

func (x *OSLogin) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSLogin.ProtoReflect.Descriptor instead.
func (*OSLogin) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *OSLogin) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OSLogin) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Username string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password []byte                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	MyId     string                 `protobuf:"bytes,4,opt,name=my_id,json=myId,proto3" json:"my_id,omitempty"`
	MyName   string                 `protobuf:"bytes,5,opt,name=my_name,json=myName,proto3" json:"my_name,omitempty"`
	Option   *OptionMessage         `protobuf:"bytes,6,opt,name=option,proto3" json:"option,omitempty"`
	// Types that are valid to be assigned to Union:
	//
	//	*LoginRequest_FileTransfer
	//	*LoginRequest_PortForward
	//	*LoginRequest_ViewCamera
	Union            isLoginRequest_Union `protobuf_oneof:"union"`
	VideoAckRequired bool                 `protobuf:"varint,9,opt,name=video_ack_required,json=videoAckRequired,proto3" json:"video_ack_required,omitempty"`
	SessionId        uint64               `protobuf:"varint,10,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Version          string               `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	OsLogin          *OSLogin             `protobuf:"bytes,12,opt,name=os_login,json=osLogin,proto3" json:"os_login,omitempty"`
	MyPlatform       string               `protobuf:"bytes,13,opt,name=my_platform,json=myPlatform,proto3" json:"my_platform,omitempty"`
	Hwid             []byte               `protobuf:"bytes,14,opt,name=hwid,proto3" json:"hwid,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *LoginRequest) GetMyId() string {
	if x != nil {
		return x.MyId
	}
	return ""
}

func (x *LoginRequest) GetMyName() string {
	if x != nil {
		return x.MyName
	}
	return ""
}

func (x *LoginRequest) GetOption() *OptionMessage {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *LoginRequest) GetUnion() isLoginRequest_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *LoginRequest) GetFileTransfer() *FileTransfer {
	if x != nil {
		if x, ok := x.Union.(*LoginRequest_FileTransfer); ok {
			return x.FileTransfer
		}
	}
	return nil
}

func (x *LoginRequest) GetPortForward() *PortForward {
	if x != nil {
		if x, ok := x.Union.(*LoginRequest_PortForward); ok {
			return x.PortForward
		}
	}
	return nil
}

func (x *LoginRequest) GetViewCamera() *ViewCamera {
	if x != nil {
		if x, ok := x.Union.(*LoginRequest_ViewCamera); ok {
			return x.ViewCamera
		}
	}
	return nil
}

func (x *LoginRequest) GetVideoAckRequired() bool {
	if x != nil {
		return x.VideoAckRequired
	}
	return false
}

func (x *LoginRequest) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *LoginRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LoginRequest) GetOsLogin() *OSLogin {
	if x != nil {
		return x.OsLogin
	}
	return nil
}

func (x *LoginRequest) GetMyPlatform() string {
	if x != nil {
		return x.MyPlatform
	}
	return ""
}

func (x *LoginRequest) GetHwid() []byte {
	if x != nil {
		return x.Hwid
	}
	return nil
}

type isLoginRequest_Union interface {
	isLoginRequest_Union()
}

type LoginRequest_FileTransfer struct {
	FileTransfer *FileTransfer `protobuf:"bytes,7,opt,name=file_transfer,json=fileTransfer,proto3,oneof"`
}

type LoginRequest_PortForward struct {
	PortForward *PortForward `protobuf:"bytes,8,opt,name=port_forward,json=portForward,proto3,oneof"`
}

type LoginRequest_ViewCamera struct {
	ViewCamera *ViewCamera `protobuf:"bytes,15,opt,name=view_camera,json=viewCamera,proto3,oneof"`
}

func (*LoginRequest_FileTransfer) isLoginRequest_Union() {}

func (*LoginRequest_PortForward) isLoginRequest_Union() {}

func (*LoginRequest_ViewCamera) isLoginRequest_Union() {}

type Auth2FA struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Hwid          []byte                 `protobuf:"bytes,2,opt,name=hwid,proto3" json:"hwid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auth2FA) Reset() {
	*x = Auth2FA{}
	mi := &file_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth2FA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth2FA) ProtoMessage() {}

func (x *Auth2FA) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth2FA.ProtoReflect.Descriptor instead.
func (*Auth2FA) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *Auth2FA) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Auth2FA) GetHwid() []byte {
	if x != nil {
		return x.Hwid
	}
	return nil
}

type ChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *ChatMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Features struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivacyMode   bool                   `protobuf:"varint,1,opt,name=privacy_mode,json=privacyMode,proto3" json:"privacy_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Features) Reset() {
	*x = Features{}
	mi := &file_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *Features) GetPrivacyMode() bool {
	if x != nil {
		return x.PrivacyMode
	}
	return false
}

type CodecAbility struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vp8           bool                   `protobuf:"varint,1,opt,name=vp8,proto3" json:"vp8,omitempty"`
	Vp9           bool                   `protobuf:"varint,2,opt,name=vp9,proto3" json:"vp9,omitempty"`
	Av1           bool                   `protobuf:"varint,3,opt,name=av1,proto3" json:"av1,omitempty"`
	H264          bool                   `protobuf:"varint,4,opt,name=h264,proto3" json:"h264,omitempty"`
	H265          bool                   `protobuf:"varint,5,opt,name=h265,proto3" json:"h265,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecAbility) Reset() {
	*x = CodecAbility{}
	mi := &file_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecAbility) ProtoMessage() {}

func (x *CodecAbility) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecAbility.ProtoReflect.Descriptor instead.
func (*CodecAbility) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *CodecAbility) GetVp8() bool {
	if x != nil {
		return x.Vp8
	}
	return false
}

func (x *CodecAbility) GetVp9() bool {
	if x != nil {
		return x.Vp9
	}
	return false
}

func (x *CodecAbility) GetAv1() bool {
	if x != nil {
		return x.Av1
	}
	return false
}

func (x *CodecAbility) GetH264() bool {
	if x != nil {
		return x.H264
	}
	return false
}

func (x *CodecAbility) GetH265() bool {
	if x != nil {
		return x.H265
	}
	return false
}

type SupportedEncoding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	H264          bool                   `protobuf:"varint,1,opt,name=h264,proto3" json:"h264,omitempty"`
	H265          bool                   `protobuf:"varint,2,opt,name=h265,proto3" json:"h265,omitempty"`
	Vp8           bool                   `protobuf:"varint,3,opt,name=vp8,proto3" json:"vp8,omitempty"`
	Av1           bool                   `protobuf:"varint,4,opt,name=av1,proto3" json:"av1,omitempty"`
	I444          *CodecAbility          `protobuf:"bytes,5,opt,name=i444,proto3" json:"i444,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupportedEncoding) Reset() {
	*x = SupportedEncoding{}
	mi := &file_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportedEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedEncoding) ProtoMessage() {}

func (x *SupportedEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedEncoding.ProtoReflect.Descriptor instead.
func (*SupportedEncoding) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *SupportedEncoding) GetH264() bool {
	if x != nil {
		return x.H264
	}
	return false
}

func (x *SupportedEncoding) GetH265() bool {
	if x != nil {
		return x.H265
	}
	return false
}

func (x *SupportedEncoding) GetVp8() bool {
	if x != nil {
		return x.Vp8
	}
	return false
}

func (x *SupportedEncoding) GetAv1() bool {
	if x != nil {
		return x.Av1
	}
	return false
}

func (x *SupportedEncoding) GetI444() *CodecAbility {
	if x != nil {
		return x.I444
	}
	return nil
}

type PeerInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Username       string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Hostname       string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Platform       string                 `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Displays       []*DisplayInfo         `protobuf:"bytes,4,rep,name=displays,proto3" json:"displays,omitempty"`
	CurrentDisplay int32                  `protobuf:"varint,5,opt,name=current_display,json=currentDisplay,proto3" json:"current_display,omitempty"`
	SasEnabled     bool                   `protobuf:"varint,6,opt,name=sas_enabled,json=sasEnabled,proto3" json:"sas_enabled,omitempty"`
	Version        string                 `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Features       *Features              `protobuf:"bytes,9,opt,name=features,proto3" json:"features,omitempty"`
	Encoding       *SupportedEncoding     `protobuf:"bytes,10,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Resolutions    *SupportedResolutions  `protobuf:"bytes,11,opt,name=resolutions,proto3" json:"resolutions,omitempty"`
	// Use JSON's key-value format which is friendly for peer to handle.
	// NOTE: Only support one-level dictionaries (for peer to update), and the key is of type string.
	PlatformAdditions string           `protobuf:"bytes,12,opt,name=platform_additions,json=platformAdditions,proto3" json:"platform_additions,omitempty"`
	WindowsSessions   *WindowsSessions `protobuf:"bytes,13,opt,name=windows_sessions,json=windowsSessions,proto3" json:"windows_sessions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

func (x *PeerInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PeerInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PeerInfo) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PeerInfo) GetDisplays() []*DisplayInfo {
	if x != nil {
		return x.Displays
	}
	return nil
}

func (x *PeerInfo) GetCurrentDisplay() int32 {
	if x != nil {
		return x.CurrentDisplay
	}
	return 0
}

func (x *PeerInfo) GetSasEnabled() bool {
	if x != nil {
		return x.SasEnabled
	}
	return false
}

func (x *PeerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PeerInfo) GetFeatures() *Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *PeerInfo) GetEncoding() *SupportedEncoding {
	if x != nil {
		return x.Encoding
	}
	return nil
}

func (x *PeerInfo) GetResolutions() *SupportedResolutions {
	if x != nil {
		return x.Resolutions
	}
	return nil
}

func (x *PeerInfo) GetPlatformAdditions() string {
	if x != nil {
		return x.PlatformAdditions
	}
	return ""
}

func (x *PeerInfo) GetWindowsSessions() *WindowsSessions {
	if x != nil {
		return x.WindowsSessions
	}
	return nil
}

type WindowsSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sid           uint32                 `protobuf:"varint,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsSession) Reset() {
	*x = WindowsSession{}
	mi := &file_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsSession) ProtoMessage() {}

func (x *WindowsSession) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsSession.ProtoReflect.Descriptor instead.
func (*WindowsSession) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

func (x *WindowsSession) GetSid() uint32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *WindowsSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LoginResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*LoginResponse_Error
	//	*LoginResponse_PeerInfo
	Union                isLoginResponse_Union `protobuf_oneof:"union"`
	EnableTrustedDevices bool                  `protobuf:"varint,3,opt,name=enable_trusted_devices,json=enableTrustedDevices,proto3" json:"enable_trusted_devices,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

func (x *LoginResponse) GetUnion() isLoginResponse_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *LoginResponse) GetError() string {
	if x != nil {
		if x, ok := x.Union.(*LoginResponse_Error); ok {
			return x.Error
		}
	}
	return ""
}

func (x *LoginResponse) GetPeerInfo() *PeerInfo {
	if x != nil {
		if x, ok := x.Union.(*LoginResponse_PeerInfo); ok {
			return x.PeerInfo
		}
	}
	return nil
}

func (x *LoginResponse) GetEnableTrustedDevices() bool {
	if x != nil {
		return x.EnableTrustedDevices
	}
	return false
}

type isLoginResponse_Union interface {
	isLoginResponse_Union()
}

type LoginResponse_Error struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type LoginResponse_PeerInfo struct {
	PeerInfo *PeerInfo `protobuf:"bytes,2,opt,name=peer_info,json=peerInfo,proto3,oneof"`
}

func (*LoginResponse_Error) isLoginResponse_Union() {}

func (*LoginResponse_PeerInfo) isLoginResponse_Union() {}

type TouchScaleUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The delta scale factor relative to the previous scale.
	// delta * 1000
	// 0 means scale end
	Scale         int32 `protobuf:"varint,1,opt,name=scale,proto3" json:"scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TouchScaleUpdate) Reset() {
	*x = TouchScaleUpdate{}
	mi := &file_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TouchScaleUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchScaleUpdate) ProtoMessage() {}

func (x *TouchScaleUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchScaleUpdate.ProtoReflect.Descriptor instead.
func (*TouchScaleUpdate) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{20}
}

func (x *TouchScaleUpdate) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type TouchPanStart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TouchPanStart) Reset() {
	*x = TouchPanStart{}
	mi := &file_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TouchPanStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchPanStart) ProtoMessage() {}

func (x *TouchPanStart) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchPanStart.ProtoReflect.Descriptor instead.
func (*TouchPanStart) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{21}
}

func (x *TouchPanStart) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TouchPanStart) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type TouchPanUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The delta x position relative to the previous position.
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	// The delta y position relative to the previous position.
	Y             int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TouchPanUpdate) Reset() {
	*x = TouchPanUpdate{}
	mi := &file_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TouchPanUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchPanUpdate) ProtoMessage() {}

func (x *TouchPanUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchPanUpdate.ProtoReflect.Descriptor instead.
func (*TouchPanUpdate) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{22}
}

func (x *TouchPanUpdate) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TouchPanUpdate) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type TouchPanEnd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TouchPanEnd) Reset() {
	*x = TouchPanEnd{}
	mi := &file_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TouchPanEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchPanEnd) ProtoMessage() {}

func (x *TouchPanEnd) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchPanEnd.ProtoReflect.Descriptor instead.
func (*TouchPanEnd) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{23}
}

func (x *TouchPanEnd) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TouchPanEnd) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type TouchEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*TouchEvent_ScaleUpdate
	//	*TouchEvent_PanStart
	//	*TouchEvent_PanUpdate
	//	*TouchEvent_PanEnd
	Union         isTouchEvent_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TouchEvent) Reset() {
	*x = TouchEvent{}
	mi := &file_message_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TouchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouchEvent) ProtoMessage() {}

func (x *TouchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouchEvent.ProtoReflect.Descriptor instead.
func (*TouchEvent) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{24}
}

func (x *TouchEvent) GetUnion() isTouchEvent_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *TouchEvent) GetScaleUpdate() *TouchScaleUpdate {
	if x != nil {
		if x, ok := x.Union.(*TouchEvent_ScaleUpdate); ok {
			return x.ScaleUpdate
		}
	}
	return nil
}

func (x *TouchEvent) GetPanStart() *TouchPanStart {
	if x != nil {
		if x, ok := x.Union.(*TouchEvent_PanStart); ok {
			return x.PanStart
		}
	}
	return nil
}

func (x *TouchEvent) GetPanUpdate() *TouchPanUpdate {
	if x != nil {
		if x, ok := x.Union.(*TouchEvent_PanUpdate); ok {
			return x.PanUpdate
		}
	}
	return nil
}

func (x *TouchEvent) GetPanEnd() *TouchPanEnd {
	if x != nil {
		if x, ok := x.Union.(*TouchEvent_PanEnd); ok {
			return x.PanEnd
		}
	}
	return nil
}

type isTouchEvent_Union interface {
	isTouchEvent_Union()
}

type TouchEvent_ScaleUpdate struct {
	ScaleUpdate *TouchScaleUpdate `protobuf:"bytes,1,opt,name=scale_update,json=scaleUpdate,proto3,oneof"`
}

type TouchEvent_PanStart struct {
	PanStart *TouchPanStart `protobuf:"bytes,2,opt,name=pan_start,json=panStart,proto3,oneof"`
}

type TouchEvent_PanUpdate struct {
	PanUpdate *TouchPanUpdate `protobuf:"bytes,3,opt,name=pan_update,json=panUpdate,proto3,oneof"`
}

type TouchEvent_PanEnd struct {
	PanEnd *TouchPanEnd `protobuf:"bytes,4,opt,name=pan_end,json=panEnd,proto3,oneof"`
}

func (*TouchEvent_ScaleUpdate) isTouchEvent_Union() {}

func (*TouchEvent_PanStart) isTouchEvent_Union() {}

func (*TouchEvent_PanUpdate) isTouchEvent_Union() {}

func (*TouchEvent_PanEnd) isTouchEvent_Union() {}

type PointerDeviceEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*PointerDeviceEvent_TouchEvent
	Union         isPointerDeviceEvent_Union `protobuf_oneof:"union"`
	Modifiers     []ControlKey               `protobuf:"varint,2,rep,packed,name=modifiers,proto3,enum=hbb.ControlKey" json:"modifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PointerDeviceEvent) Reset() {
	*x = PointerDeviceEvent{}
	mi := &file_message_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointerDeviceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointerDeviceEvent) ProtoMessage() {}

func (x *PointerDeviceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointerDeviceEvent.ProtoReflect.Descriptor instead.
func (*PointerDeviceEvent) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{25}
}

func (x *PointerDeviceEvent) GetUnion() isPointerDeviceEvent_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *PointerDeviceEvent) GetTouchEvent() *TouchEvent {
	if x != nil {
		if x, ok := x.Union.(*PointerDeviceEvent_TouchEvent); ok {
			return x.TouchEvent
		}
	}
	return nil
}

func (x *PointerDeviceEvent) GetModifiers() []ControlKey {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type isPointerDeviceEvent_Union interface {
	isPointerDeviceEvent_Union()
}

type PointerDeviceEvent_TouchEvent struct {
	TouchEvent *TouchEvent `protobuf:"bytes,1,opt,name=touch_event,json=touchEvent,proto3,oneof"`
}

func (*PointerDeviceEvent_TouchEvent) isPointerDeviceEvent_Union() {}

type MouseEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mask          int32                  `protobuf:"varint,1,opt,name=mask,proto3" json:"mask,omitempty"`
	X             int32                  `protobuf:"zigzag32,2,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"zigzag32,3,opt,name=y,proto3" json:"y,omitempty"`
	Modifiers     []ControlKey           `protobuf:"varint,4,rep,packed,name=modifiers,proto3,enum=hbb.ControlKey" json:"modifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MouseEvent) Reset() {
	*x = MouseEvent{}
	mi := &file_message_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MouseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseEvent) ProtoMessage() {}

func (x *MouseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseEvent.ProtoReflect.Descriptor instead.
func (*MouseEvent) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{26}
}

func (x *MouseEvent) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *MouseEvent) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MouseEvent) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MouseEvent) GetModifiers() []ControlKey {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type KeyEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `down` indicates the key's state(down or up).
	Down bool `protobuf:"varint,1,opt,name=down,proto3" json:"down,omitempty"`
	// `press` indicates a click event(down and up).
	Press bool `protobuf:"varint,2,opt,name=press,proto3" json:"press,omitempty"`
	// Types that are valid to be assigned to Union:
	//
	//	*KeyEvent_ControlKey
	//	*KeyEvent_Chr
	//	*KeyEvent_Unicode
	//	*KeyEvent_Seq
	//	*KeyEvent_Win2WinHotkey
	Union         isKeyEvent_Union `protobuf_oneof:"union"`
	Modifiers     []ControlKey     `protobuf:"varint,8,rep,packed,name=modifiers,proto3,enum=hbb.ControlKey" json:"modifiers,omitempty"`
	Mode          KeyboardMode     `protobuf:"varint,9,opt,name=mode,proto3,enum=hbb.KeyboardMode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyEvent) Reset() {
	*x = KeyEvent{}
	mi := &file_message_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEvent) ProtoMessage() {}

func (x *KeyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEvent.ProtoReflect.Descriptor instead.
func (*KeyEvent) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{27}
}

func (x *KeyEvent) GetDown() bool {
	if x != nil {
		return x.Down
	}
	return false
}

func (x *KeyEvent) GetPress() bool {
	if x != nil {
		return x.Press
	}
	return false
}

func (x *KeyEvent) GetUnion() isKeyEvent_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *KeyEvent) GetControlKey() ControlKey {
	if x != nil {
		if x, ok := x.Union.(*KeyEvent_ControlKey); ok {
			return x.ControlKey
		}
	}
	return ControlKey_Unknown
}

func (x *KeyEvent) GetChr() uint32 {
	if x != nil {
		if x, ok := x.Union.(*KeyEvent_Chr); ok {
			return x.Chr
		}
	}
	return 0
}

func (x *KeyEvent) GetUnicode() uint32 {
	if x != nil {
		if x, ok := x.Union.(*KeyEvent_Unicode); ok {
			return x.Unicode
		}
	}
	return 0
}

func (x *KeyEvent) GetSeq() string {
	if x != nil {
		if x, ok := x.Union.(*KeyEvent_Seq); ok {
			return x.Seq
		}
	}
	return ""
}

func (x *KeyEvent) GetWin2WinHotkey() uint32 {
	if x != nil {
		if x, ok := x.Union.(*KeyEvent_Win2WinHotkey); ok {
			return x.Win2WinHotkey
		}
	}
	return 0
}

func (x *KeyEvent) GetModifiers() []ControlKey {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *KeyEvent) GetMode() KeyboardMode {
	if x != nil {
		return x.Mode
	}
	return KeyboardMode_Legacy
}

type isKeyEvent_Union interface {
	isKeyEvent_Union()
}

type KeyEvent_ControlKey struct {
	ControlKey ControlKey `protobuf:"varint,3,opt,name=control_key,json=controlKey,proto3,enum=hbb.ControlKey,oneof"`
}

type KeyEvent_Chr struct {
	// position key code. win: scancode, linux: key code, macos: key code
	Chr uint32 `protobuf:"varint,4,opt,name=chr,proto3,oneof"`
}

type KeyEvent_Unicode struct {
	Unicode uint32 `protobuf:"varint,5,opt,name=unicode,proto3,oneof"`
}

type KeyEvent_Seq struct {
	Seq string `protobuf:"bytes,6,opt,name=seq,proto3,oneof"`
}

type KeyEvent_Win2WinHotkey struct {
	// high word. virtual keycode
	// low word. unicode
	Win2WinHotkey uint32 `protobuf:"varint,7,opt,name=win2win_hotkey,json=win2winHotkey,proto3,oneof"`
}

func (*KeyEvent_ControlKey) isKeyEvent_Union() {}

func (*KeyEvent_Chr) isKeyEvent_Union() {}

func (*KeyEvent_Unicode) isKeyEvent_Union() {}

func (*KeyEvent_Seq) isKeyEvent_Union() {}

func (*KeyEvent_Win2WinHotkey) isKeyEvent_Union() {}

type CursorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Hotx          int32                  `protobuf:"zigzag32,2,opt,name=hotx,proto3" json:"hotx,omitempty"`
	Hoty          int32                  `protobuf:"zigzag32,3,opt,name=hoty,proto3" json:"hoty,omitempty"`
	Width         int32                  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	Colors        []byte                 `protobuf:"bytes,6,opt,name=colors,proto3" json:"colors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CursorData) Reset() {
	*x = CursorData{}
	mi := &file_message_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CursorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorData) ProtoMessage() {}

func (x *CursorData) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorData.ProtoReflect.Descriptor instead.
func (*CursorData) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{28}
}

func (x *CursorData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CursorData) GetHotx() int32 {
	if x != nil {
		return x.Hotx
	}
	return 0
}

func (x *CursorData) GetHoty() int32 {
	if x != nil {
		return x.Hoty
	}
	return 0
}

func (x *CursorData) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CursorData) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CursorData) GetColors() []byte {
	if x != nil {
		return x.Colors
	}
	return nil
}

type CursorPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"zigzag32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"zigzag32,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CursorPosition) Reset() {
	*x = CursorPosition{}
	mi := &file_message_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CursorPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPosition) ProtoMessage() {}

func (x *CursorPosition) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPosition.ProtoReflect.Descriptor instead.
func (*CursorPosition) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{29}
}

func (x *CursorPosition) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CursorPosition) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Hash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Salt          string                 `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Challenge     string                 `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hash) Reset() {
	*x = Hash{}
	mi := &file_message_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{30}
}

func (x *Hash) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *Hash) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

type Clipboard struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Compress bool                   `protobuf:"varint,1,opt,name=compress,proto3" json:"compress,omitempty"`
	Content  []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Width    int32                  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   int32                  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Format   ClipboardFormat        `protobuf:"varint,5,opt,name=format,proto3,enum=hbb.ClipboardFormat" json:"format,omitempty"`
	// Special format name, only used when format is Special.
	SpecialName   string `protobuf:"bytes,6,opt,name=special_name,json=specialName,proto3" json:"special_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Clipboard) Reset() {
	*x = Clipboard{}
	mi := &file_message_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Clipboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clipboard) ProtoMessage() {}

func (x *Clipboard) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clipboard.ProtoReflect.Descriptor instead.
func (*Clipboard) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{31}
}

func (x *Clipboard) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Clipboard) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Clipboard) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Clipboard) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Clipboard) GetFormat() ClipboardFormat {
	if x != nil {
		return x.Format
	}
	return ClipboardFormat_Text
}

func (x *Clipboard) GetSpecialName() string {
	if x != nil {
		return x.SpecialName
	}
	return ""
}

type MultiClipboards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clipboards    []*Clipboard           `protobuf:"bytes,1,rep,name=clipboards,proto3" json:"clipboards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiClipboards) Reset() {
	*x = MultiClipboards{}
	mi := &file_message_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiClipboards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiClipboards) ProtoMessage() {}

func (x *MultiClipboards) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiClipboards.ProtoReflect.Descriptor instead.
func (*MultiClipboards) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{32}
}

func (x *MultiClipboards) GetClipboards() []*Clipboard {
	if x != nil {
		return x.Clipboards
	}
	return nil
}

type FileEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryType     FileType               `protobuf:"varint,1,opt,name=entry_type,json=entryType,proto3,enum=hbb.FileType" json:"entry_type,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsHidden      bool                   `protobuf:"varint,3,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	Size          uint64                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	ModifiedTime  uint64                 `protobuf:"varint,5,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileEntry) Reset() {
	*x = FileEntry{}
	mi := &file_message_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileEntry) ProtoMessage() {}

func (x *FileEntry) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileEntry.ProtoReflect.Descriptor instead.
func (*FileEntry) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{33}
}

func (x *FileEntry) GetEntryType() FileType {
	if x != nil {
		return x.EntryType
	}
	return FileType_Dir
}

func (x *FileEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileEntry) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *FileEntry) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileEntry) GetModifiedTime() uint64 {
	if x != nil {
		return x.ModifiedTime
	}
	return 0
}

type FileDirectory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Entries       []*FileEntry           `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDirectory) Reset() {
	*x = FileDirectory{}
	mi := &file_message_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirectory) ProtoMessage() {}

func (x *FileDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirectory.ProtoReflect.Descriptor instead.
func (*FileDirectory) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{34}
}

func (x *FileDirectory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileDirectory) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileDirectory) GetEntries() []*FileEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ReadDir struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	IncludeHidden bool                   `protobuf:"varint,2,opt,name=include_hidden,json=includeHidden,proto3" json:"include_hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDir) Reset() {
	*x = ReadDir{}
	mi := &file_message_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDir) ProtoMessage() {}

func (x *ReadDir) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDir.ProtoReflect.Descriptor instead.
func (*ReadDir) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{35}
}

func (x *ReadDir) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadDir) GetIncludeHidden() bool {
	if x != nil {
		return x.IncludeHidden
	}
	return false
}

type ReadEmptyDirs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	IncludeHidden bool                   `protobuf:"varint,2,opt,name=include_hidden,json=includeHidden,proto3" json:"include_hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadEmptyDirs) Reset() {
	*x = ReadEmptyDirs{}
	mi := &file_message_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadEmptyDirs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEmptyDirs) ProtoMessage() {}

func (x *ReadEmptyDirs) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEmptyDirs.ProtoReflect.Descriptor instead.
func (*ReadEmptyDirs) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{36}
}

func (x *ReadEmptyDirs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadEmptyDirs) GetIncludeHidden() bool {
	if x != nil {
		return x.IncludeHidden
	}
	return false
}

type ReadEmptyDirsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	EmptyDirs     []*FileDirectory       `protobuf:"bytes,2,rep,name=empty_dirs,json=emptyDirs,proto3" json:"empty_dirs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadEmptyDirsResponse) Reset() {
	*x = ReadEmptyDirsResponse{}
	mi := &file_message_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadEmptyDirsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadEmptyDirsResponse) ProtoMessage() {}

func (x *ReadEmptyDirsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadEmptyDirsResponse.ProtoReflect.Descriptor instead.
func (*ReadEmptyDirsResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{37}
}

func (x *ReadEmptyDirsResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadEmptyDirsResponse) GetEmptyDirs() []*FileDirectory {
	if x != nil {
		return x.EmptyDirs
	}
	return nil
}

type ReadAllFiles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	IncludeHidden bool                   `protobuf:"varint,3,opt,name=include_hidden,json=includeHidden,proto3" json:"include_hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadAllFiles) Reset() {
	*x = ReadAllFiles{}
	mi := &file_message_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadAllFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAllFiles) ProtoMessage() {}

func (x *ReadAllFiles) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAllFiles.ProtoReflect.Descriptor instead.
func (*ReadAllFiles) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{38}
}

func (x *ReadAllFiles) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadAllFiles) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadAllFiles) GetIncludeHidden() bool {
	if x != nil {
		return x.IncludeHidden
	}
	return false
}

type FileRename struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	NewName       string                 `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRename) Reset() {
	*x = FileRename{}
	mi := &file_message_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRename) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRename) ProtoMessage() {}

func (x *FileRename) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRename.ProtoReflect.Descriptor instead.
func (*FileRename) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{39}
}

func (x *FileRename) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileRename) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileRename) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type FileAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*FileAction_ReadDir
	//	*FileAction_Send
	//	*FileAction_Receive
	//	*FileAction_Create
	//	*FileAction_RemoveDir
	//	*FileAction_RemoveFile
	//	*FileAction_AllFiles
	//	*FileAction_Cancel
	//	*FileAction_SendConfirm
	//	*FileAction_Rename
	//	*FileAction_ReadEmptyDirs
	Union         isFileAction_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileAction) Reset() {
	*x = FileAction{}
	mi := &file_message_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAction) ProtoMessage() {}

func (x *FileAction) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAction.ProtoReflect.Descriptor instead.
func (*FileAction) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{40}
}

func (x *FileAction) GetUnion() isFileAction_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *FileAction) GetReadDir() *ReadDir {
	if x != nil {
		if x, ok := x.Union.(*FileAction_ReadDir); ok {
			return x.ReadDir
		}
	}
	return nil
}

func (x *FileAction) GetSend() *FileTransferSendRequest {
	if x != nil {
		if x, ok := x.Union.(*FileAction_Send); ok {
			return x.Send
		}
	}
	return nil
}

func (x *FileAction) GetReceive() *FileTransferReceiveRequest {
	if x != nil {
		if x, ok := x.Union.(*FileAction_Receive); ok {
			return x.Receive
		}
	}
	return nil
}

func (x *FileAction) GetCreate() *FileDirCreate {
	if x != nil {
		if x, ok := x.Union.(*FileAction_Create); ok {
			return x.Create
		}
	}
	return nil
}

func (x *FileAction) GetRemoveDir() *FileRemoveDir {
	if x != nil {
		if x, ok := x.Union.(*FileAction_RemoveDir); ok {
			return x.RemoveDir
		}
	}
	return nil
}

func (x *FileAction) GetRemoveFile() *FileRemoveFile {
	if x != nil {
		if x, ok := x.Union.(*FileAction_RemoveFile); ok {
			return x.RemoveFile
		}
	}
	return nil
}

func (x *FileAction) GetAllFiles() *ReadAllFiles {
	if x != nil {
		if x, ok := x.Union.(*FileAction_AllFiles); ok {
			return x.AllFiles
		}
	}
	return nil
}

func (x *FileAction) GetCancel() *FileTransferCancel {
	if x != nil {
		if x, ok := x.Union.(*FileAction_Cancel); ok {
			return x.Cancel
		}
	}
	return nil
}

func (x *FileAction) GetSendConfirm() *FileTransferSendConfirmRequest {
	if x != nil {
		if x, ok := x.Union.(*FileAction_SendConfirm); ok {
			return x.SendConfirm
		}
	}
	return nil
}

func (x *FileAction) GetRename() *FileRename {
	if x != nil {
		if x, ok := x.Union.(*FileAction_Rename); ok {
			return x.Rename
		}
	}
	return nil
}

func (x *FileAction) GetReadEmptyDirs() *ReadEmptyDirs {
	if x != nil {
		if x, ok := x.Union.(*FileAction_ReadEmptyDirs); ok {
			return x.ReadEmptyDirs
		}
	}
	return nil
}

type isFileAction_Union interface {
	isFileAction_Union()
}

type FileAction_ReadDir struct {
	ReadDir *ReadDir `protobuf:"bytes,1,opt,name=read_dir,json=readDir,proto3,oneof"`
}

type FileAction_Send struct {
	Send *FileTransferSendRequest `protobuf:"bytes,2,opt,name=send,proto3,oneof"`
}

type FileAction_Receive struct {
	Receive *FileTransferReceiveRequest `protobuf:"bytes,3,opt,name=receive,proto3,oneof"`
}

type FileAction_Create struct {
	Create *FileDirCreate `protobuf:"bytes,4,opt,name=create,proto3,oneof"`
}

type FileAction_RemoveDir struct {
	RemoveDir *FileRemoveDir `protobuf:"bytes,5,opt,name=remove_dir,json=removeDir,proto3,oneof"`
}

type FileAction_RemoveFile struct {
	RemoveFile *FileRemoveFile `protobuf:"bytes,6,opt,name=remove_file,json=removeFile,proto3,oneof"`
}

type FileAction_AllFiles struct {
	AllFiles *ReadAllFiles `protobuf:"bytes,7,opt,name=all_files,json=allFiles,proto3,oneof"`
}

type FileAction_Cancel struct {
	Cancel *FileTransferCancel `protobuf:"bytes,8,opt,name=cancel,proto3,oneof"`
}

type FileAction_SendConfirm struct {
	SendConfirm *FileTransferSendConfirmRequest `protobuf:"bytes,9,opt,name=send_confirm,json=sendConfirm,proto3,oneof"`
}

type FileAction_Rename struct {
	Rename *FileRename `protobuf:"bytes,10,opt,name=rename,proto3,oneof"`
}

type FileAction_ReadEmptyDirs struct {
	ReadEmptyDirs *ReadEmptyDirs `protobuf:"bytes,11,opt,name=read_empty_dirs,json=readEmptyDirs,proto3,oneof"`
}

func (*FileAction_ReadDir) isFileAction_Union() {}

func (*FileAction_Send) isFileAction_Union() {}

func (*FileAction_Receive) isFileAction_Union() {}

func (*FileAction_Create) isFileAction_Union() {}

func (*FileAction_RemoveDir) isFileAction_Union() {}

func (*FileAction_RemoveFile) isFileAction_Union() {}

func (*FileAction_AllFiles) isFileAction_Union() {}

func (*FileAction_Cancel) isFileAction_Union() {}

func (*FileAction_SendConfirm) isFileAction_Union() {}

func (*FileAction_Rename) isFileAction_Union() {}

func (*FileAction_ReadEmptyDirs) isFileAction_Union() {}

type FileTransferCancel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferCancel) Reset() {
	*x = FileTransferCancel{}
	mi := &file_message_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferCancel) ProtoMessage() {}

func (x *FileTransferCancel) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferCancel.ProtoReflect.Descriptor instead.
func (*FileTransferCancel) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{41}
}

func (x *FileTransferCancel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*FileResponse_Dir
	//	*FileResponse_Block
	//	*FileResponse_Error
	//	*FileResponse_Done
	//	*FileResponse_Digest
	//	*FileResponse_EmptyDirs
	Union         isFileResponse_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	mi := &file_message_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{42}
}

func (x *FileResponse) GetUnion() isFileResponse_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *FileResponse) GetDir() *FileDirectory {
	if x != nil {
		if x, ok := x.Union.(*FileResponse_Dir); ok {
			return x.Dir
		}
	}
	return nil
}

func (x *FileResponse) GetBlock() *FileTransferBlock {
	if x != nil {
		if x, ok := x.Union.(*FileResponse_Block); ok {
			return x.Block
		}
	}
	return nil
}

func (x *FileResponse) GetError() *FileTransferError {
	if x != nil {
		if x, ok := x.Union.(*FileResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *FileResponse) GetDone() *FileTransferDone {
	if x != nil {
		if x, ok := x.Union.(*FileResponse_Done); ok {
			return x.Done
		}
	}
	return nil
}

func (x *FileResponse) GetDigest() *FileTransferDigest {
	if x != nil {
		if x, ok := x.Union.(*FileResponse_Digest); ok {
			return x.Digest
		}
	}
	return nil
}

func (x *FileResponse) GetEmptyDirs() *ReadEmptyDirsResponse {
	if x != nil {
		if x, ok := x.Union.(*FileResponse_EmptyDirs); ok {
			return x.EmptyDirs
		}
	}
	return nil
}

type isFileResponse_Union interface {
	isFileResponse_Union()
}

type FileResponse_Dir struct {
	Dir *FileDirectory `protobuf:"bytes,1,opt,name=dir,proto3,oneof"`
}

type FileResponse_Block struct {
	Block *FileTransferBlock `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

type FileResponse_Error struct {
	Error *FileTransferError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type FileResponse_Done struct {
	Done *FileTransferDone `protobuf:"bytes,4,opt,name=done,proto3,oneof"`
}

type FileResponse_Digest struct {
	Digest *FileTransferDigest `protobuf:"bytes,5,opt,name=digest,proto3,oneof"`
}

type FileResponse_EmptyDirs struct {
	EmptyDirs *ReadEmptyDirsResponse `protobuf:"bytes,6,opt,name=empty_dirs,json=emptyDirs,proto3,oneof"`
}

func (*FileResponse_Dir) isFileResponse_Union() {}

func (*FileResponse_Block) isFileResponse_Union() {}

func (*FileResponse_Error) isFileResponse_Union() {}

func (*FileResponse_Done) isFileResponse_Union() {}

func (*FileResponse_Digest) isFileResponse_Union() {}

func (*FileResponse_EmptyDirs) isFileResponse_Union() {}

type FileTransferDigest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileNum       int32                  `protobuf:"zigzag32,2,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	LastModified  uint64                 `protobuf:"varint,3,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	FileSize      uint64                 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	IsUpload      bool                   `protobuf:"varint,5,opt,name=is_upload,json=isUpload,proto3" json:"is_upload,omitempty"`
	IsIdentical   bool                   `protobuf:"varint,6,opt,name=is_identical,json=isIdentical,proto3" json:"is_identical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferDigest) Reset() {
	*x = FileTransferDigest{}
	mi := &file_message_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferDigest) ProtoMessage() {}

func (x *FileTransferDigest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferDigest.ProtoReflect.Descriptor instead.
func (*FileTransferDigest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{43}
}

func (x *FileTransferDigest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileTransferDigest) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *FileTransferDigest) GetLastModified() uint64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *FileTransferDigest) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileTransferDigest) GetIsUpload() bool {
	if x != nil {
		return x.IsUpload
	}
	return false
}

func (x *FileTransferDigest) GetIsIdentical() bool {
	if x != nil {
		return x.IsIdentical
	}
	return false
}

type FileTransferBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileNum       int32                  `protobuf:"zigzag32,2,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Compressed    bool                   `protobuf:"varint,4,opt,name=compressed,proto3" json:"compressed,omitempty"`
	BlkId         uint32                 `protobuf:"varint,5,opt,name=blk_id,json=blkId,proto3" json:"blk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferBlock) Reset() {
	*x = FileTransferBlock{}
	mi := &file_message_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferBlock) ProtoMessage() {}

func (x *FileTransferBlock) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferBlock.ProtoReflect.Descriptor instead.
func (*FileTransferBlock) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{44}
}

func (x *FileTransferBlock) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileTransferBlock) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *FileTransferBlock) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileTransferBlock) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

func (x *FileTransferBlock) GetBlkId() uint32 {
	if x != nil {
		return x.BlkId
	}
	return 0
}

type FileTransferError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	FileNum       int32                  `protobuf:"zigzag32,3,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferError) Reset() {
	*x = FileTransferError{}
	mi := &file_message_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferError) ProtoMessage() {}

func (x *FileTransferError) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferError.ProtoReflect.Descriptor instead.
func (*FileTransferError) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{45}
}

func (x *FileTransferError) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileTransferError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FileTransferError) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type FileTransferSendRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	IncludeHidden bool                   `protobuf:"varint,3,opt,name=include_hidden,json=includeHidden,proto3" json:"include_hidden,omitempty"`
	FileNum       int32                  `protobuf:"varint,4,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferSendRequest) Reset() {
	*x = FileTransferSendRequest{}
	mi := &file_message_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferSendRequest) ProtoMessage() {}

func (x *FileTransferSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferSendRequest.ProtoReflect.Descriptor instead.
func (*FileTransferSendRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{46}
}

func (x *FileTransferSendRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileTransferSendRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileTransferSendRequest) GetIncludeHidden() bool {
	if x != nil {
		return x.IncludeHidden
	}
	return false
}

func (x *FileTransferSendRequest) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type FileTransferSendConfirmRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Id      int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileNum int32                  `protobuf:"zigzag32,2,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	// Types that are valid to be assigned to Union:
	//
	//	*FileTransferSendConfirmRequest_Skip
	//	*FileTransferSendConfirmRequest_OffsetBlk
	Union         isFileTransferSendConfirmRequest_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferSendConfirmRequest) Reset() {
	*x = FileTransferSendConfirmRequest{}
	mi := &file_message_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferSendConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferSendConfirmRequest) ProtoMessage() {}

func (x *FileTransferSendConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferSendConfirmRequest.ProtoReflect.Descriptor instead.
func (*FileTransferSendConfirmRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{47}
}

func (x *FileTransferSendConfirmRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileTransferSendConfirmRequest) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *FileTransferSendConfirmRequest) GetUnion() isFileTransferSendConfirmRequest_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *FileTransferSendConfirmRequest) GetSkip() bool {
	if x != nil {
		if x, ok := x.Union.(*FileTransferSendConfirmRequest_Skip); ok {
			return x.Skip
		}
	}
	return false
}

func (x *FileTransferSendConfirmRequest) GetOffsetBlk() uint32 {
	if x != nil {
		if x, ok := x.Union.(*FileTransferSendConfirmRequest_OffsetBlk); ok {
			return x.OffsetBlk
		}
	}
	return 0
}

type isFileTransferSendConfirmRequest_Union interface {
	isFileTransferSendConfirmRequest_Union()
}

type FileTransferSendConfirmRequest_Skip struct {
	Skip bool `protobuf:"varint,3,opt,name=skip,proto3,oneof"`
}

type FileTransferSendConfirmRequest_OffsetBlk struct {
	OffsetBlk uint32 `protobuf:"varint,4,opt,name=offset_blk,json=offsetBlk,proto3,oneof"`
}

func (*FileTransferSendConfirmRequest_Skip) isFileTransferSendConfirmRequest_Union() {}

func (*FileTransferSendConfirmRequest_OffsetBlk) isFileTransferSendConfirmRequest_Union() {}

type FileTransferDone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FileNum       int32                  `protobuf:"zigzag32,2,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferDone) Reset() {
	*x = FileTransferDone{}
	mi := &file_message_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferDone) ProtoMessage() {}

func (x *FileTransferDone) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferDone.ProtoReflect.Descriptor instead.
func (*FileTransferDone) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{48}
}

func (x *FileTransferDone) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileTransferDone) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type FileTransferReceiveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"` // path written to
	Files         []*FileEntry           `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	FileNum       int32                  `protobuf:"varint,4,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	TotalSize     uint64                 `protobuf:"varint,5,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferReceiveRequest) Reset() {
	*x = FileTransferReceiveRequest{}
	mi := &file_message_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferReceiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferReceiveRequest) ProtoMessage() {}

func (x *FileTransferReceiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferReceiveRequest.ProtoReflect.Descriptor instead.
func (*FileTransferReceiveRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{49}
}

func (x *FileTransferReceiveRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileTransferReceiveRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileTransferReceiveRequest) GetFiles() []*FileEntry {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FileTransferReceiveRequest) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

func (x *FileTransferReceiveRequest) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type FileRemoveDir struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Recursive     bool                   `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRemoveDir) Reset() {
	*x = FileRemoveDir{}
	mi := &file_message_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRemoveDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRemoveDir) ProtoMessage() {}

func (x *FileRemoveDir) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRemoveDir.ProtoReflect.Descriptor instead.
func (*FileRemoveDir) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{50}
}

func (x *FileRemoveDir) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileRemoveDir) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileRemoveDir) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type FileRemoveFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	FileNum       int32                  `protobuf:"zigzag32,3,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRemoveFile) Reset() {
	*x = FileRemoveFile{}
	mi := &file_message_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRemoveFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRemoveFile) ProtoMessage() {}

func (x *FileRemoveFile) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRemoveFile.ProtoReflect.Descriptor instead.
func (*FileRemoveFile) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{51}
}

func (x *FileRemoveFile) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileRemoveFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileRemoveFile) GetFileNum() int32 {
	if x != nil {
		return x.FileNum
	}
	return 0
}

type FileDirCreate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDirCreate) Reset() {
	*x = FileDirCreate{}
	mi := &file_message_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDirCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDirCreate) ProtoMessage() {}

func (x *FileDirCreate) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDirCreate.ProtoReflect.Descriptor instead.
func (*FileDirCreate) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{52}
}

func (x *FileDirCreate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileDirCreate) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// main logic from freeRDP
type CliprdrMonitorReady struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliprdrMonitorReady) Reset() {
	*x = CliprdrMonitorReady{}
	mi := &file_message_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrMonitorReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrMonitorReady) ProtoMessage() {}

func (x *CliprdrMonitorReady) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrMonitorReady.ProtoReflect.Descriptor instead.
func (*CliprdrMonitorReady) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{53}
}

type CliprdrFormat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Format        string                 `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliprdrFormat) Reset() {
	*x = CliprdrFormat{}
	mi := &file_message_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrFormat) ProtoMessage() {}

func (x *CliprdrFormat) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrFormat.ProtoReflect.Descriptor instead.
func (*CliprdrFormat) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{54}
}

func (x *CliprdrFormat) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CliprdrFormat) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type CliprdrServerFormatList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Formats       []*CliprdrFormat       `protobuf:"bytes,2,rep,name=formats,proto3" json:"formats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliprdrServerFormatList) Reset() {
	*x = CliprdrServerFormatList{}
	mi := &file_message_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrServerFormatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrServerFormatList) ProtoMessage() {}

func (x *CliprdrServerFormatList) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrServerFormatList.ProtoReflect.Descriptor instead.
func (*CliprdrServerFormatList) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{55}
}

func (x *CliprdrServerFormatList) GetFormats() []*CliprdrFormat {
	if x != nil {
		return x.Formats
	}
	return nil
}

type CliprdrServerFormatListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgFlags      int32                  `protobuf:"varint,2,opt,name=msg_flags,json=msgFlags,proto3" json:"msg_flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliprdrServerFormatListResponse) Reset() {
	*x = CliprdrServerFormatListResponse{}
	mi := &file_message_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrServerFormatListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrServerFormatListResponse) ProtoMessage() {}

func (x *CliprdrServerFormatListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrServerFormatListResponse.ProtoReflect.Descriptor instead.
func (*CliprdrServerFormatListResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{56}
}

func (x *CliprdrServerFormatListResponse) GetMsgFlags() int32 {
	if x != nil {
		return x.MsgFlags
	}
	return 0
}

type CliprdrServerFormatDataRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RequestedFormatId int32                  `protobuf:"varint,2,opt,name=requested_format_id,json=requestedFormatId,proto3" json:"requested_format_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CliprdrServerFormatDataRequest) Reset() {
	*x = CliprdrServerFormatDataRequest{}
	mi := &file_message_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrServerFormatDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrServerFormatDataRequest) ProtoMessage() {}

func (x *CliprdrServerFormatDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrServerFormatDataRequest.ProtoReflect.Descriptor instead.
func (*CliprdrServerFormatDataRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{57}
}

func (x *CliprdrServerFormatDataRequest) GetRequestedFormatId() int32 {
	if x != nil {
		return x.RequestedFormatId
	}
	return 0
}

type CliprdrServerFormatDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgFlags      int32                  `protobuf:"varint,2,opt,name=msg_flags,json=msgFlags,proto3" json:"msg_flags,omitempty"`
	FormatData    []byte                 `protobuf:"bytes,3,opt,name=format_data,json=formatData,proto3" json:"format_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliprdrServerFormatDataResponse) Reset() {
	*x = CliprdrServerFormatDataResponse{}
	mi := &file_message_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrServerFormatDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrServerFormatDataResponse) ProtoMessage() {}

func (x *CliprdrServerFormatDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrServerFormatDataResponse.ProtoReflect.Descriptor instead.
func (*CliprdrServerFormatDataResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{58}
}

func (x *CliprdrServerFormatDataResponse) GetMsgFlags() int32 {
	if x != nil {
		return x.MsgFlags
	}
	return 0
}

func (x *CliprdrServerFormatDataResponse) GetFormatData() []byte {
	if x != nil {
		return x.FormatData
	}
	return nil
}

type CliprdrFileContentsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StreamId       int32                  `protobuf:"varint,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ListIndex      int32                  `protobuf:"varint,3,opt,name=list_index,json=listIndex,proto3" json:"list_index,omitempty"`
	DwFlags        int32                  `protobuf:"varint,4,opt,name=dw_flags,json=dwFlags,proto3" json:"dw_flags,omitempty"`
	NPositionLow   int32                  `protobuf:"varint,5,opt,name=n_position_low,json=nPositionLow,proto3" json:"n_position_low,omitempty"`
	NPositionHigh  int32                  `protobuf:"varint,6,opt,name=n_position_high,json=nPositionHigh,proto3" json:"n_position_high,omitempty"`
	CbRequested    int32                  `protobuf:"varint,7,opt,name=cb_requested,json=cbRequested,proto3" json:"cb_requested,omitempty"`
	HaveClipDataId bool                   `protobuf:"varint,8,opt,name=have_clip_data_id,json=haveClipDataId,proto3" json:"have_clip_data_id,omitempty"`
	ClipDataId     int32                  `protobuf:"varint,9,opt,name=clip_data_id,json=clipDataId,proto3" json:"clip_data_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CliprdrFileContentsRequest) Reset() {
	*x = CliprdrFileContentsRequest{}
	mi := &file_message_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrFileContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrFileContentsRequest) ProtoMessage() {}

func (x *CliprdrFileContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrFileContentsRequest.ProtoReflect.Descriptor instead.
func (*CliprdrFileContentsRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{59}
}

func (x *CliprdrFileContentsRequest) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *CliprdrFileContentsRequest) GetListIndex() int32 {
	if x != nil {
		return x.ListIndex
	}
	return 0
}

func (x *CliprdrFileContentsRequest) GetDwFlags() int32 {
	if x != nil {
		return x.DwFlags
	}
	return 0
}

func (x *CliprdrFileContentsRequest) GetNPositionLow() int32 {
	if x != nil {
		return x.NPositionLow
	}
	return 0
}

func (x *CliprdrFileContentsRequest) GetNPositionHigh() int32 {
	if x != nil {
		return x.NPositionHigh
	}
	return 0
}

func (x *CliprdrFileContentsRequest) GetCbRequested() int32 {
	if x != nil {
		return x.CbRequested
	}
	return 0
}

func (x *CliprdrFileContentsRequest) GetHaveClipDataId() bool {
	if x != nil {
		return x.HaveClipDataId
	}
	return false
}

func (x *CliprdrFileContentsRequest) GetClipDataId() int32 {
	if x != nil {
		return x.ClipDataId
	}
	return 0
}

type CliprdrFileContentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgFlags      int32                  `protobuf:"varint,3,opt,name=msg_flags,json=msgFlags,proto3" json:"msg_flags,omitempty"`
	StreamId      int32                  `protobuf:"varint,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	RequestedData []byte                 `protobuf:"bytes,5,opt,name=requested_data,json=requestedData,proto3" json:"requested_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliprdrFileContentsResponse) Reset() {
	*x = CliprdrFileContentsResponse{}
	mi := &file_message_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrFileContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrFileContentsResponse) ProtoMessage() {}

func (x *CliprdrFileContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrFileContentsResponse.ProtoReflect.Descriptor instead.
func (*CliprdrFileContentsResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{60}
}

func (x *CliprdrFileContentsResponse) GetMsgFlags() int32 {
	if x != nil {
		return x.MsgFlags
	}
	return 0
}

func (x *CliprdrFileContentsResponse) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *CliprdrFileContentsResponse) GetRequestedData() []byte {
	if x != nil {
		return x.RequestedData
	}
	return nil
}

// Try empty clipboard in the following case(Windows only):
// 1. `A`(Windows) -> `B`, `C`
// 2. Copy in `A, file clipboards on `B` and `C` are updated.
// 3. Copy in `B`.
// `A` should tell `C` to empty the file clipboard.
type CliprdrTryEmpty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliprdrTryEmpty) Reset() {
	*x = CliprdrTryEmpty{}
	mi := &file_message_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliprdrTryEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliprdrTryEmpty) ProtoMessage() {}

func (x *CliprdrTryEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliprdrTryEmpty.ProtoReflect.Descriptor instead.
func (*CliprdrTryEmpty) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{61}
}

type Cliprdr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*Cliprdr_Ready
	//	*Cliprdr_FormatList
	//	*Cliprdr_FormatListResponse
	//	*Cliprdr_FormatDataRequest
	//	*Cliprdr_FormatDataResponse
	//	*Cliprdr_FileContentsRequest
	//	*Cliprdr_FileContentsResponse
	//	*Cliprdr_TryEmpty
	Union         isCliprdr_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cliprdr) Reset() {
	*x = Cliprdr{}
	mi := &file_message_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cliprdr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cliprdr) ProtoMessage() {}

func (x *Cliprdr) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cliprdr.ProtoReflect.Descriptor instead.
func (*Cliprdr) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{62}
}

func (x *Cliprdr) GetUnion() isCliprdr_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *Cliprdr) GetReady() *CliprdrMonitorReady {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_Ready); ok {
			return x.Ready
		}
	}
	return nil
}

func (x *Cliprdr) GetFormatList() *CliprdrServerFormatList {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_FormatList); ok {
			return x.FormatList
		}
	}
	return nil
}

func (x *Cliprdr) GetFormatListResponse() *CliprdrServerFormatListResponse {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_FormatListResponse); ok {
			return x.FormatListResponse
		}
	}
	return nil
}

func (x *Cliprdr) GetFormatDataRequest() *CliprdrServerFormatDataRequest {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_FormatDataRequest); ok {
			return x.FormatDataRequest
		}
	}
	return nil
}

func (x *Cliprdr) GetFormatDataResponse() *CliprdrServerFormatDataResponse {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_FormatDataResponse); ok {
			return x.FormatDataResponse
		}
	}
	return nil
}

func (x *Cliprdr) GetFileContentsRequest() *CliprdrFileContentsRequest {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_FileContentsRequest); ok {
			return x.FileContentsRequest
		}
	}
	return nil
}

func (x *Cliprdr) GetFileContentsResponse() *CliprdrFileContentsResponse {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_FileContentsResponse); ok {
			return x.FileContentsResponse
		}
	}
	return nil
}

func (x *Cliprdr) GetTryEmpty() *CliprdrTryEmpty {
	if x != nil {
		if x, ok := x.Union.(*Cliprdr_TryEmpty); ok {
			return x.TryEmpty
		}
	}
	return nil
}

type isCliprdr_Union interface {
	isCliprdr_Union()
}

type Cliprdr_Ready struct {
	Ready *CliprdrMonitorReady `protobuf:"bytes,1,opt,name=ready,proto3,oneof"`
}

type Cliprdr_FormatList struct {
	FormatList *CliprdrServerFormatList `protobuf:"bytes,2,opt,name=format_list,json=formatList,proto3,oneof"`
}

type Cliprdr_FormatListResponse struct {
	FormatListResponse *CliprdrServerFormatListResponse `protobuf:"bytes,3,opt,name=format_list_response,json=formatListResponse,proto3,oneof"`
}

type Cliprdr_FormatDataRequest struct {
	FormatDataRequest *CliprdrServerFormatDataRequest `protobuf:"bytes,4,opt,name=format_data_request,json=formatDataRequest,proto3,oneof"`
}

type Cliprdr_FormatDataResponse struct {
	FormatDataResponse *CliprdrServerFormatDataResponse `protobuf:"bytes,5,opt,name=format_data_response,json=formatDataResponse,proto3,oneof"`
}

type Cliprdr_FileContentsRequest struct {
	FileContentsRequest *CliprdrFileContentsRequest `protobuf:"bytes,6,opt,name=file_contents_request,json=fileContentsRequest,proto3,oneof"`
}

type Cliprdr_FileContentsResponse struct {
	FileContentsResponse *CliprdrFileContentsResponse `protobuf:"bytes,7,opt,name=file_contents_response,json=fileContentsResponse,proto3,oneof"`
}

type Cliprdr_TryEmpty struct {
	TryEmpty *CliprdrTryEmpty `protobuf:"bytes,8,opt,name=try_empty,json=tryEmpty,proto3,oneof"`
}

func (*Cliprdr_Ready) isCliprdr_Union() {}

func (*Cliprdr_FormatList) isCliprdr_Union() {}

func (*Cliprdr_FormatListResponse) isCliprdr_Union() {}

func (*Cliprdr_FormatDataRequest) isCliprdr_Union() {}

func (*Cliprdr_FormatDataResponse) isCliprdr_Union() {}

func (*Cliprdr_FileContentsRequest) isCliprdr_Union() {}

func (*Cliprdr_FileContentsResponse) isCliprdr_Union() {}

func (*Cliprdr_TryEmpty) isCliprdr_Union() {}

type Resolution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         int32                  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resolution) Reset() {
	*x = Resolution{}
	mi := &file_message_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolution) ProtoMessage() {}

func (x *Resolution) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolution.ProtoReflect.Descriptor instead.
func (*Resolution) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{63}
}

func (x *Resolution) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Resolution) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type DisplayResolution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Display       int32                  `protobuf:"varint,1,opt,name=display,proto3" json:"display,omitempty"`
	Resolution    *Resolution            `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisplayResolution) Reset() {
	*x = DisplayResolution{}
	mi := &file_message_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplayResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayResolution) ProtoMessage() {}

func (x *DisplayResolution) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayResolution.ProtoReflect.Descriptor instead.
func (*DisplayResolution) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{64}
}

func (x *DisplayResolution) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *DisplayResolution) GetResolution() *Resolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

type SupportedResolutions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resolutions   []*Resolution          `protobuf:"bytes,1,rep,name=resolutions,proto3" json:"resolutions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupportedResolutions) Reset() {
	*x = SupportedResolutions{}
	mi := &file_message_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportedResolutions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedResolutions) ProtoMessage() {}

func (x *SupportedResolutions) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedResolutions.ProtoReflect.Descriptor instead.
func (*SupportedResolutions) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{65}
}

func (x *SupportedResolutions) GetResolutions() []*Resolution {
	if x != nil {
		return x.Resolutions
	}
	return nil
}

type SwitchDisplay struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Display        int32                  `protobuf:"varint,1,opt,name=display,proto3" json:"display,omitempty"`
	X              int32                  `protobuf:"zigzag32,2,opt,name=x,proto3" json:"x,omitempty"`
	Y              int32                  `protobuf:"zigzag32,3,opt,name=y,proto3" json:"y,omitempty"`
	Width          int32                  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height         int32                  `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	CursorEmbedded bool                   `protobuf:"varint,6,opt,name=cursor_embedded,json=cursorEmbedded,proto3" json:"cursor_embedded,omitempty"`
	Resolutions    *SupportedResolutions  `protobuf:"bytes,7,opt,name=resolutions,proto3" json:"resolutions,omitempty"`
	// Do not care about the origin point for now.
	OriginalResolution *Resolution `protobuf:"bytes,8,opt,name=original_resolution,json=originalResolution,proto3" json:"original_resolution,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SwitchDisplay) Reset() {
	*x = SwitchDisplay{}
	mi := &file_message_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDisplay) ProtoMessage() {}

func (x *SwitchDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDisplay.ProtoReflect.Descriptor instead.
func (*SwitchDisplay) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{66}
}

func (x *SwitchDisplay) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *SwitchDisplay) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *SwitchDisplay) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *SwitchDisplay) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SwitchDisplay) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SwitchDisplay) GetCursorEmbedded() bool {
	if x != nil {
		return x.CursorEmbedded
	}
	return false
}

func (x *SwitchDisplay) GetResolutions() *SupportedResolutions {
	if x != nil {
		return x.Resolutions
	}
	return nil
}

func (x *SwitchDisplay) GetOriginalResolution() *Resolution {
	if x != nil {
		return x.OriginalResolution
	}
	return nil
}

type CaptureDisplays struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Add           []int32                `protobuf:"varint,1,rep,packed,name=add,proto3" json:"add,omitempty"`
	Sub           []int32                `protobuf:"varint,2,rep,packed,name=sub,proto3" json:"sub,omitempty"`
	Set           []int32                `protobuf:"varint,3,rep,packed,name=set,proto3" json:"set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptureDisplays) Reset() {
	*x = CaptureDisplays{}
	mi := &file_message_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureDisplays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureDisplays) ProtoMessage() {}

func (x *CaptureDisplays) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureDisplays.ProtoReflect.Descriptor instead.
func (*CaptureDisplays) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{67}
}

func (x *CaptureDisplays) GetAdd() []int32 {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *CaptureDisplays) GetSub() []int32 {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *CaptureDisplays) GetSet() []int32 {
	if x != nil {
		return x.Set
	}
	return nil
}

type ToggleVirtualDisplay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Display       int32                  `protobuf:"varint,1,opt,name=display,proto3" json:"display,omitempty"`
	On            bool                   `protobuf:"varint,2,opt,name=on,proto3" json:"on,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToggleVirtualDisplay) Reset() {
	*x = ToggleVirtualDisplay{}
	mi := &file_message_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToggleVirtualDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleVirtualDisplay) ProtoMessage() {}

func (x *ToggleVirtualDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleVirtualDisplay.ProtoReflect.Descriptor instead.
func (*ToggleVirtualDisplay) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{68}
}

func (x *ToggleVirtualDisplay) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *ToggleVirtualDisplay) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

type TogglePrivacyMode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImplKey       string                 `protobuf:"bytes,1,opt,name=impl_key,json=implKey,proto3" json:"impl_key,omitempty"`
	On            bool                   `protobuf:"varint,2,opt,name=on,proto3" json:"on,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TogglePrivacyMode) Reset() {
	*x = TogglePrivacyMode{}
	mi := &file_message_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TogglePrivacyMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TogglePrivacyMode) ProtoMessage() {}

func (x *TogglePrivacyMode) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TogglePrivacyMode.ProtoReflect.Descriptor instead.
func (*TogglePrivacyMode) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{69}
}

func (x *TogglePrivacyMode) GetImplKey() string {
	if x != nil {
		return x.ImplKey
	}
	return ""
}

func (x *TogglePrivacyMode) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

type PermissionInfo struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Permission    PermissionInfo_Permission `protobuf:"varint,1,opt,name=permission,proto3,enum=hbb.PermissionInfo_Permission" json:"permission,omitempty"`
	Enabled       bool                      `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionInfo) Reset() {
	*x = PermissionInfo{}
	mi := &file_message_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionInfo) ProtoMessage() {}

func (x *PermissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionInfo.ProtoReflect.Descriptor instead.
func (*PermissionInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{70}
}

func (x *PermissionInfo) GetPermission() PermissionInfo_Permission {
	if x != nil {
		return x.Permission
	}
	return PermissionInfo_Keyboard
}

func (x *PermissionInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SupportedDecoding struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	AbilityVp9    int32                         `protobuf:"varint,1,opt,name=ability_vp9,json=abilityVp9,proto3" json:"ability_vp9,omitempty"`
	AbilityH264   int32                         `protobuf:"varint,2,opt,name=ability_h264,json=abilityH264,proto3" json:"ability_h264,omitempty"`
	AbilityH265   int32                         `protobuf:"varint,3,opt,name=ability_h265,json=abilityH265,proto3" json:"ability_h265,omitempty"`
	Prefer        SupportedDecoding_PreferCodec `protobuf:"varint,4,opt,name=prefer,proto3,enum=hbb.SupportedDecoding_PreferCodec" json:"prefer,omitempty"`
	AbilityVp8    int32                         `protobuf:"varint,5,opt,name=ability_vp8,json=abilityVp8,proto3" json:"ability_vp8,omitempty"`
	AbilityAv1    int32                         `protobuf:"varint,6,opt,name=ability_av1,json=abilityAv1,proto3" json:"ability_av1,omitempty"`
	I444          *CodecAbility                 `protobuf:"bytes,7,opt,name=i444,proto3" json:"i444,omitempty"`
	PreferChroma  Chroma                        `protobuf:"varint,8,opt,name=prefer_chroma,json=preferChroma,proto3,enum=hbb.Chroma" json:"prefer_chroma,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupportedDecoding) Reset() {
	*x = SupportedDecoding{}
	mi := &file_message_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupportedDecoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedDecoding) ProtoMessage() {}

func (x *SupportedDecoding) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedDecoding.ProtoReflect.Descriptor instead.
func (*SupportedDecoding) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{71}
}

func (x *SupportedDecoding) GetAbilityVp9() int32 {
	if x != nil {
		return x.AbilityVp9
	}
	return 0
}

func (x *SupportedDecoding) GetAbilityH264() int32 {
	if x != nil {
		return x.AbilityH264
	}
	return 0
}

func (x *SupportedDecoding) GetAbilityH265() int32 {
	if x != nil {
		return x.AbilityH265
	}
	return 0
}

func (x *SupportedDecoding) GetPrefer() SupportedDecoding_PreferCodec {
	if x != nil {
		return x.Prefer
	}
	return SupportedDecoding_Auto
}

func (x *SupportedDecoding) GetAbilityVp8() int32 {
	if x != nil {
		return x.AbilityVp8
	}
	return 0
}

func (x *SupportedDecoding) GetAbilityAv1() int32 {
	if x != nil {
		return x.AbilityAv1
	}
	return 0
}

func (x *SupportedDecoding) GetI444() *CodecAbility {
	if x != nil {
		return x.I444
	}
	return nil
}

func (x *SupportedDecoding) GetPreferChroma() Chroma {
	if x != nil {
		return x.PreferChroma
	}
	return Chroma_I420
}

type OptionMessage struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	ImageQuality        ImageQuality             `protobuf:"varint,1,opt,name=image_quality,json=imageQuality,proto3,enum=hbb.ImageQuality" json:"image_quality,omitempty"`
	LockAfterSessionEnd OptionMessage_BoolOption `protobuf:"varint,2,opt,name=lock_after_session_end,json=lockAfterSessionEnd,proto3,enum=hbb.OptionMessage_BoolOption" json:"lock_after_session_end,omitempty"`
	ShowRemoteCursor    OptionMessage_BoolOption `protobuf:"varint,3,opt,name=show_remote_cursor,json=showRemoteCursor,proto3,enum=hbb.OptionMessage_BoolOption" json:"show_remote_cursor,omitempty"`
	PrivacyMode         OptionMessage_BoolOption `protobuf:"varint,4,opt,name=privacy_mode,json=privacyMode,proto3,enum=hbb.OptionMessage_BoolOption" json:"privacy_mode,omitempty"`
	BlockInput          OptionMessage_BoolOption `protobuf:"varint,5,opt,name=block_input,json=blockInput,proto3,enum=hbb.OptionMessage_BoolOption" json:"block_input,omitempty"`
	CustomImageQuality  int32                    `protobuf:"varint,6,opt,name=custom_image_quality,json=customImageQuality,proto3" json:"custom_image_quality,omitempty"`
	DisableAudio        OptionMessage_BoolOption `protobuf:"varint,7,opt,name=disable_audio,json=disableAudio,proto3,enum=hbb.OptionMessage_BoolOption" json:"disable_audio,omitempty"`
	DisableClipboard    OptionMessage_BoolOption `protobuf:"varint,8,opt,name=disable_clipboard,json=disableClipboard,proto3,enum=hbb.OptionMessage_BoolOption" json:"disable_clipboard,omitempty"`
	EnableFileTransfer  OptionMessage_BoolOption `protobuf:"varint,9,opt,name=enable_file_transfer,json=enableFileTransfer,proto3,enum=hbb.OptionMessage_BoolOption" json:"enable_file_transfer,omitempty"`
	SupportedDecoding   *SupportedDecoding       `protobuf:"bytes,10,opt,name=supported_decoding,json=supportedDecoding,proto3" json:"supported_decoding,omitempty"`
	CustomFps           int32                    `protobuf:"varint,11,opt,name=custom_fps,json=customFps,proto3" json:"custom_fps,omitempty"`
	DisableKeyboard     OptionMessage_BoolOption `protobuf:"varint,12,opt,name=disable_keyboard,json=disableKeyboard,proto3,enum=hbb.OptionMessage_BoolOption" json:"disable_keyboard,omitempty"`
	// Position 13 is used for Resolution. Remove later.
	// Resolution custom_resolution = 13;
	// BoolOption support_windows_specific_session = 14;
	// starting from 15 please, do not use removed fields
	FollowRemoteCursor OptionMessage_BoolOption `protobuf:"varint,15,opt,name=follow_remote_cursor,json=followRemoteCursor,proto3,enum=hbb.OptionMessage_BoolOption" json:"follow_remote_cursor,omitempty"`
	FollowRemoteWindow OptionMessage_BoolOption `protobuf:"varint,16,opt,name=follow_remote_window,json=followRemoteWindow,proto3,enum=hbb.OptionMessage_BoolOption" json:"follow_remote_window,omitempty"`
	DisableCamera      OptionMessage_BoolOption `protobuf:"varint,17,opt,name=disable_camera,json=disableCamera,proto3,enum=hbb.OptionMessage_BoolOption" json:"disable_camera,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OptionMessage) Reset() {
	*x = OptionMessage{}
	mi := &file_message_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMessage) ProtoMessage() {}

func (x *OptionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMessage.ProtoReflect.Descriptor instead.
func (*OptionMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{72}
}

func (x *OptionMessage) GetImageQuality() ImageQuality {
	if x != nil {
		return x.ImageQuality
	}
	return ImageQuality_NotSet
}

func (x *OptionMessage) GetLockAfterSessionEnd() OptionMessage_BoolOption {
	if x != nil {
		return x.LockAfterSessionEnd
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetShowRemoteCursor() OptionMessage_BoolOption {
	if x != nil {
		return x.ShowRemoteCursor
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetPrivacyMode() OptionMessage_BoolOption {
	if x != nil {
		return x.PrivacyMode
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetBlockInput() OptionMessage_BoolOption {
	if x != nil {
		return x.BlockInput
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetCustomImageQuality() int32 {
	if x != nil {
		return x.CustomImageQuality
	}
	return 0
}

func (x *OptionMessage) GetDisableAudio() OptionMessage_BoolOption {
	if x != nil {
		return x.DisableAudio
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetDisableClipboard() OptionMessage_BoolOption {
	if x != nil {
		return x.DisableClipboard
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetEnableFileTransfer() OptionMessage_BoolOption {
	if x != nil {
		return x.EnableFileTransfer
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetSupportedDecoding() *SupportedDecoding {
	if x != nil {
		return x.SupportedDecoding
	}
	return nil
}

func (x *OptionMessage) GetCustomFps() int32 {
	if x != nil {
		return x.CustomFps
	}
	return 0
}

func (x *OptionMessage) GetDisableKeyboard() OptionMessage_BoolOption {
	if x != nil {
		return x.DisableKeyboard
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetFollowRemoteCursor() OptionMessage_BoolOption {
	if x != nil {
		return x.FollowRemoteCursor
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetFollowRemoteWindow() OptionMessage_BoolOption {
	if x != nil {
		return x.FollowRemoteWindow
	}
	return OptionMessage_NotSet
}

func (x *OptionMessage) GetDisableCamera() OptionMessage_BoolOption {
	if x != nil {
		return x.DisableCamera
	}
	return OptionMessage_NotSet
}

type TestDelay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	FromClient    bool                   `protobuf:"varint,2,opt,name=from_client,json=fromClient,proto3" json:"from_client,omitempty"`
	LastDelay     uint32                 `protobuf:"varint,3,opt,name=last_delay,json=lastDelay,proto3" json:"last_delay,omitempty"`
	TargetBitrate uint32                 `protobuf:"varint,4,opt,name=target_bitrate,json=targetBitrate,proto3" json:"target_bitrate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestDelay) Reset() {
	*x = TestDelay{}
	mi := &file_message_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestDelay) ProtoMessage() {}

func (x *TestDelay) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestDelay.ProtoReflect.Descriptor instead.
func (*TestDelay) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{73}
}

func (x *TestDelay) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TestDelay) GetFromClient() bool {
	if x != nil {
		return x.FromClient
	}
	return false
}

func (x *TestDelay) GetLastDelay() uint32 {
	if x != nil {
		return x.LastDelay
	}
	return 0
}

func (x *TestDelay) GetTargetBitrate() uint32 {
	if x != nil {
		return x.TargetBitrate
	}
	return 0
}

type PublicKey struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AsymmetricValue []byte                 `protobuf:"bytes,1,opt,name=asymmetric_value,json=asymmetricValue,proto3" json:"asymmetric_value,omitempty"`
	SymmetricValue  []byte                 `protobuf:"bytes,2,opt,name=symmetric_value,json=symmetricValue,proto3" json:"symmetric_value,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	mi := &file_message_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{74}
}

func (x *PublicKey) GetAsymmetricValue() []byte {
	if x != nil {
		return x.AsymmetricValue
	}
	return nil
}

func (x *PublicKey) GetSymmetricValue() []byte {
	if x != nil {
		return x.SymmetricValue
	}
	return nil
}

type SignedId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedId) Reset() {
	*x = SignedId{}
	mi := &file_message_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedId) ProtoMessage() {}

func (x *SignedId) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedId.ProtoReflect.Descriptor instead.
func (*SignedId) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{75}
}

func (x *SignedId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type AudioFormat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SampleRate    uint32                 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Channels      uint32                 `protobuf:"varint,2,opt,name=channels,proto3" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioFormat) Reset() {
	*x = AudioFormat{}
	mi := &file_message_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFormat) ProtoMessage() {}

func (x *AudioFormat) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFormat.ProtoReflect.Descriptor instead.
func (*AudioFormat) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{76}
}

func (x *AudioFormat) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioFormat) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

type AudioFrame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioFrame) Reset() {
	*x = AudioFrame{}
	mi := &file_message_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFrame) ProtoMessage() {}

func (x *AudioFrame) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFrame.ProtoReflect.Descriptor instead.
func (*AudioFrame) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{77}
}

func (x *AudioFrame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Notify peer to show message box.
type MessageBox struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message type. Refer to flutter/lib/common.dart/msgBox().
	Msgtype string `protobuf:"bytes,1,opt,name=msgtype,proto3" json:"msgtype,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// English
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// If not empty, msgbox provides a button to following the link.
	// The link here can't be directly http url.
	// It must be the key of http url configed in peer side or "rustdesk://*" (jump in app).
	Link          string `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageBox) Reset() {
	*x = MessageBox{}
	mi := &file_message_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBox) ProtoMessage() {}

func (x *MessageBox) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBox.ProtoReflect.Descriptor instead.
func (*MessageBox) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{78}
}

func (x *MessageBox) GetMsgtype() string {
	if x != nil {
		return x.Msgtype
	}
	return ""
}

func (x *MessageBox) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageBox) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MessageBox) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type BackNotification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*BackNotification_PrivacyModeState_
	//	*BackNotification_BlockInputState_
	Union isBackNotification_Union `protobuf_oneof:"union"`
	// Supplementary message, for "PrvOnFailed" and "PrvOffFailed"
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	// The key of the implementation
	ImplKey       string `protobuf:"bytes,4,opt,name=impl_key,json=implKey,proto3" json:"impl_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackNotification) Reset() {
	*x = BackNotification{}
	mi := &file_message_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackNotification) ProtoMessage() {}

func (x *BackNotification) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackNotification.ProtoReflect.Descriptor instead.
func (*BackNotification) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{79}
}

func (x *BackNotification) GetUnion() isBackNotification_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *BackNotification) GetPrivacyModeState() BackNotification_PrivacyModeState {
	if x != nil {
		if x, ok := x.Union.(*BackNotification_PrivacyModeState_); ok {
			return x.PrivacyModeState
		}
	}
	return BackNotification_PrvStateUnknown
}

func (x *BackNotification) GetBlockInputState() BackNotification_BlockInputState {
	if x != nil {
		if x, ok := x.Union.(*BackNotification_BlockInputState_); ok {
			return x.BlockInputState
		}
	}
	return BackNotification_BlkStateUnknown
}

func (x *BackNotification) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *BackNotification) GetImplKey() string {
	if x != nil {
		return x.ImplKey
	}
	return ""
}

type isBackNotification_Union interface {
	isBackNotification_Union()
}

type BackNotification_PrivacyModeState_ struct {
	PrivacyModeState BackNotification_PrivacyModeState `protobuf:"varint,1,opt,name=privacy_mode_state,json=privacyModeState,proto3,enum=hbb.BackNotification_PrivacyModeState,oneof"`
}

type BackNotification_BlockInputState_ struct {
	BlockInputState BackNotification_BlockInputState `protobuf:"varint,2,opt,name=block_input_state,json=blockInputState,proto3,enum=hbb.BackNotification_BlockInputState,oneof"`
}

func (*BackNotification_PrivacyModeState_) isBackNotification_Union() {}

func (*BackNotification_BlockInputState_) isBackNotification_Union() {}

type ElevationRequestWithLogon struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElevationRequestWithLogon) Reset() {
	*x = ElevationRequestWithLogon{}
	mi := &file_message_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElevationRequestWithLogon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElevationRequestWithLogon) ProtoMessage() {}

func (x *ElevationRequestWithLogon) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElevationRequestWithLogon.ProtoReflect.Descriptor instead.
func (*ElevationRequestWithLogon) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{80}
}

func (x *ElevationRequestWithLogon) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ElevationRequestWithLogon) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ElevationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*ElevationRequest_Direct
	//	*ElevationRequest_Logon
	Union         isElevationRequest_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ElevationRequest) Reset() {
	*x = ElevationRequest{}
	mi := &file_message_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElevationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElevationRequest) ProtoMessage() {}

func (x *ElevationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElevationRequest.ProtoReflect.Descriptor instead.
func (*ElevationRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{81}
}

func (x *ElevationRequest) GetUnion() isElevationRequest_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *ElevationRequest) GetDirect() bool {
	if x != nil {
		if x, ok := x.Union.(*ElevationRequest_Direct); ok {
			return x.Direct
		}
	}
	return false
}

func (x *ElevationRequest) GetLogon() *ElevationRequestWithLogon {
	if x != nil {
		if x, ok := x.Union.(*ElevationRequest_Logon); ok {
			return x.Logon
		}
	}
	return nil
}

type isElevationRequest_Union interface {
	isElevationRequest_Union()
}

type ElevationRequest_Direct struct {
	Direct bool `protobuf:"varint,1,opt,name=direct,proto3,oneof"`
}

type ElevationRequest_Logon struct {
	Logon *ElevationRequestWithLogon `protobuf:"bytes,2,opt,name=logon,proto3,oneof"`
}

func (*ElevationRequest_Direct) isElevationRequest_Union() {}

func (*ElevationRequest_Logon) isElevationRequest_Union() {}

type SwitchSidesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchSidesRequest) Reset() {
	*x = SwitchSidesRequest{}
	mi := &file_message_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchSidesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSidesRequest) ProtoMessage() {}

func (x *SwitchSidesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSidesRequest.ProtoReflect.Descriptor instead.
func (*SwitchSidesRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{82}
}

func (x *SwitchSidesRequest) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type SwitchSidesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          []byte                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Lr            *LoginRequest          `protobuf:"bytes,2,opt,name=lr,proto3" json:"lr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchSidesResponse) Reset() {
	*x = SwitchSidesResponse{}
	mi := &file_message_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchSidesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSidesResponse) ProtoMessage() {}

func (x *SwitchSidesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSidesResponse.ProtoReflect.Descriptor instead.
func (*SwitchSidesResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{83}
}

func (x *SwitchSidesResponse) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *SwitchSidesResponse) GetLr() *LoginRequest {
	if x != nil {
		return x.Lr
	}
	return nil
}

type SwitchBack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchBack) Reset() {
	*x = SwitchBack{}
	mi := &file_message_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchBack) ProtoMessage() {}

func (x *SwitchBack) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchBack.ProtoReflect.Descriptor instead.
func (*SwitchBack) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{84}
}

type PluginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginRequest) Reset() {
	*x = PluginRequest{}
	mi := &file_message_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRequest) ProtoMessage() {}

func (x *PluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRequest.ProtoReflect.Descriptor instead.
func (*PluginRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{85}
}

func (x *PluginRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type PluginFailure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Msg           string                 `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginFailure) Reset() {
	*x = PluginFailure{}
	mi := &file_message_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginFailure) ProtoMessage() {}

func (x *PluginFailure) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginFailure.ProtoReflect.Descriptor instead.
func (*PluginFailure) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{86}
}

func (x *PluginFailure) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginFailure) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginFailure) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type WindowsSessions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sessions      []*WindowsSession      `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	CurrentSid    uint32                 `protobuf:"varint,2,opt,name=current_sid,json=currentSid,proto3" json:"current_sid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsSessions) Reset() {
	*x = WindowsSessions{}
	mi := &file_message_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsSessions) ProtoMessage() {}

func (x *WindowsSessions) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsSessions.ProtoReflect.Descriptor instead.
func (*WindowsSessions) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{87}
}

func (x *WindowsSessions) GetSessions() []*WindowsSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *WindowsSessions) GetCurrentSid() uint32 {
	if x != nil {
		return x.CurrentSid
	}
	return 0
}

// Query messages from peer.
type MessageQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SwitchDisplay message of the target display.
	// If the target display is not found, the message will be ignored.
	SwitchDisplay int32 `protobuf:"varint,1,opt,name=switch_display,json=switchDisplay,proto3" json:"switch_display,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageQuery) Reset() {
	*x = MessageQuery{}
	mi := &file_message_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageQuery) ProtoMessage() {}

func (x *MessageQuery) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageQuery.ProtoReflect.Descriptor instead.
func (*MessageQuery) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{88}
}

func (x *MessageQuery) GetSwitchDisplay() int32 {
	if x != nil {
		return x.SwitchDisplay
	}
	return 0
}

type Misc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*Misc_ChatMessage
	//	*Misc_SwitchDisplay
	//	*Misc_PermissionInfo
	//	*Misc_Option
	//	*Misc_AudioFormat
	//	*Misc_CloseReason
	//	*Misc_RefreshVideo
	//	*Misc_VideoReceived
	//	*Misc_BackNotification
	//	*Misc_RestartRemoteDevice
	//	*Misc_Uac
	//	*Misc_ForegroundWindowElevated
	//	*Misc_StopService
	//	*Misc_ElevationRequest
	//	*Misc_ElevationResponse
	//	*Misc_PortableServiceRunning
	//	*Misc_SwitchSidesRequest
	//	*Misc_SwitchBack
	//	*Misc_ChangeResolution
	//	*Misc_PluginRequest
	//	*Misc_PluginFailure
	//	*Misc_FullSpeedFps
	//	*Misc_AutoAdjustFps
	//	*Misc_ClientRecordStatus
	//	*Misc_CaptureDisplays
	//	*Misc_RefreshVideoDisplay
	//	*Misc_ToggleVirtualDisplay
	//	*Misc_TogglePrivacyMode
	//	*Misc_SupportedEncoding
	//	*Misc_SelectedSid
	//	*Misc_ChangeDisplayResolution
	//	*Misc_MessageQuery
	//	*Misc_FollowCurrentDisplay
	Union         isMisc_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Misc) Reset() {
	*x = Misc{}
	mi := &file_message_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Misc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Misc) ProtoMessage() {}

func (x *Misc) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Misc.ProtoReflect.Descriptor instead.
func (*Misc) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{89}
}

func (x *Misc) GetUnion() isMisc_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *Misc) GetChatMessage() *ChatMessage {
	if x != nil {
		if x, ok := x.Union.(*Misc_ChatMessage); ok {
			return x.ChatMessage
		}
	}
	return nil
}

func (x *Misc) GetSwitchDisplay() *SwitchDisplay {
	if x != nil {
		if x, ok := x.Union.(*Misc_SwitchDisplay); ok {
			return x.SwitchDisplay
		}
	}
	return nil
}

func (x *Misc) GetPermissionInfo() *PermissionInfo {
	if x != nil {
		if x, ok := x.Union.(*Misc_PermissionInfo); ok {
			return x.PermissionInfo
		}
	}
	return nil
}

func (x *Misc) GetOption() *OptionMessage {
	if x != nil {
		if x, ok := x.Union.(*Misc_Option); ok {
			return x.Option
		}
	}
	return nil
}

func (x *Misc) GetAudioFormat() *AudioFormat {
	if x != nil {
		if x, ok := x.Union.(*Misc_AudioFormat); ok {
			return x.AudioFormat
		}
	}
	return nil
}

func (x *Misc) GetCloseReason() string {
	if x != nil {
		if x, ok := x.Union.(*Misc_CloseReason); ok {
			return x.CloseReason
		}
	}
	return ""
}

func (x *Misc) GetRefreshVideo() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_RefreshVideo); ok {
			return x.RefreshVideo
		}
	}
	return false
}

func (x *Misc) GetVideoReceived() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_VideoReceived); ok {
			return x.VideoReceived
		}
	}
	return false
}

func (x *Misc) GetBackNotification() *BackNotification {
	if x != nil {
		if x, ok := x.Union.(*Misc_BackNotification); ok {
			return x.BackNotification
		}
	}
	return nil
}

func (x *Misc) GetRestartRemoteDevice() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_RestartRemoteDevice); ok {
			return x.RestartRemoteDevice
		}
	}
	return false
}

func (x *Misc) GetUac() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_Uac); ok {
			return x.Uac
		}
	}
	return false
}

func (x *Misc) GetForegroundWindowElevated() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_ForegroundWindowElevated); ok {
			return x.ForegroundWindowElevated
		}
	}
	return false
}

func (x *Misc) GetStopService() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_StopService); ok {
			return x.StopService
		}
	}
	return false
}

func (x *Misc) GetElevationRequest() *ElevationRequest {
	if x != nil {
		if x, ok := x.Union.(*Misc_ElevationRequest); ok {
			return x.ElevationRequest
		}
	}
	return nil
}

func (x *Misc) GetElevationResponse() string {
	if x != nil {
		if x, ok := x.Union.(*Misc_ElevationResponse); ok {
			return x.ElevationResponse
		}
	}
	return ""
}

func (x *Misc) GetPortableServiceRunning() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_PortableServiceRunning); ok {
			return x.PortableServiceRunning
		}
	}
	return false
}

func (x *Misc) GetSwitchSidesRequest() *SwitchSidesRequest {
	if x != nil {
		if x, ok := x.Union.(*Misc_SwitchSidesRequest); ok {
			return x.SwitchSidesRequest
		}
	}
	return nil
}

func (x *Misc) GetSwitchBack() *SwitchBack {
	if x != nil {
		if x, ok := x.Union.(*Misc_SwitchBack); ok {
			return x.SwitchBack
		}
	}
	return nil
}

func (x *Misc) GetChangeResolution() *Resolution {
	if x != nil {
		if x, ok := x.Union.(*Misc_ChangeResolution); ok {
			return x.ChangeResolution
		}
	}
	return nil
}

func (x *Misc) GetPluginRequest() *PluginRequest {
	if x != nil {
		if x, ok := x.Union.(*Misc_PluginRequest); ok {
			return x.PluginRequest
		}
	}
	return nil
}

func (x *Misc) GetPluginFailure() *PluginFailure {
	if x != nil {
		if x, ok := x.Union.(*Misc_PluginFailure); ok {
			return x.PluginFailure
		}
	}
	return nil
}

func (x *Misc) GetFullSpeedFps() uint32 {
	if x != nil {
		if x, ok := x.Union.(*Misc_FullSpeedFps); ok {
			return x.FullSpeedFps
		}
	}
	return 0
}

func (x *Misc) GetAutoAdjustFps() uint32 {
	if x != nil {
		if x, ok := x.Union.(*Misc_AutoAdjustFps); ok {
			return x.AutoAdjustFps
		}
	}
	return 0
}

func (x *Misc) GetClientRecordStatus() bool {
	if x != nil {
		if x, ok := x.Union.(*Misc_ClientRecordStatus); ok {
			return x.ClientRecordStatus
		}
	}
	return false
}

func (x *Misc) GetCaptureDisplays() *CaptureDisplays {
	if x != nil {
		if x, ok := x.Union.(*Misc_CaptureDisplays); ok {
			return x.CaptureDisplays
		}
	}
	return nil
}

func (x *Misc) GetRefreshVideoDisplay() int32 {
	if x != nil {
		if x, ok := x.Union.(*Misc_RefreshVideoDisplay); ok {
			return x.RefreshVideoDisplay
		}
	}
	return 0
}

func (x *Misc) GetToggleVirtualDisplay() *ToggleVirtualDisplay {
	if x != nil {
		if x, ok := x.Union.(*Misc_ToggleVirtualDisplay); ok {
			return x.ToggleVirtualDisplay
		}
	}
	return nil
}

func (x *Misc) GetTogglePrivacyMode() *TogglePrivacyMode {
	if x != nil {
		if x, ok := x.Union.(*Misc_TogglePrivacyMode); ok {
			return x.TogglePrivacyMode
		}
	}
	return nil
}

func (x *Misc) GetSupportedEncoding() *SupportedEncoding {
	if x != nil {
		if x, ok := x.Union.(*Misc_SupportedEncoding); ok {
			return x.SupportedEncoding
		}
	}
	return nil
}

func (x *Misc) GetSelectedSid() uint32 {
	if x != nil {
		if x, ok := x.Union.(*Misc_SelectedSid); ok {
			return x.SelectedSid
		}
	}
	return 0
}

func (x *Misc) GetChangeDisplayResolution() *DisplayResolution {
	if x != nil {
		if x, ok := x.Union.(*Misc_ChangeDisplayResolution); ok {
			return x.ChangeDisplayResolution
		}
	}
	return nil
}

func (x *Misc) GetMessageQuery() *MessageQuery {
	if x != nil {
		if x, ok := x.Union.(*Misc_MessageQuery); ok {
			return x.MessageQuery
		}
	}
	return nil
}

func (x *Misc) GetFollowCurrentDisplay() int32 {
	if x != nil {
		if x, ok := x.Union.(*Misc_FollowCurrentDisplay); ok {
			return x.FollowCurrentDisplay
		}
	}
	return 0
}

type isMisc_Union interface {
	isMisc_Union()
}

type Misc_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,4,opt,name=chat_message,json=chatMessage,proto3,oneof"`
}

type Misc_SwitchDisplay struct {
	SwitchDisplay *SwitchDisplay `protobuf:"bytes,5,opt,name=switch_display,json=switchDisplay,proto3,oneof"`
}

type Misc_PermissionInfo struct {
	PermissionInfo *PermissionInfo `protobuf:"bytes,6,opt,name=permission_info,json=permissionInfo,proto3,oneof"`
}

type Misc_Option struct {
	Option *OptionMessage `protobuf:"bytes,7,opt,name=option,proto3,oneof"`
}

type Misc_AudioFormat struct {
	AudioFormat *AudioFormat `protobuf:"bytes,8,opt,name=audio_format,json=audioFormat,proto3,oneof"`
}

type Misc_CloseReason struct {
	CloseReason string `protobuf:"bytes,9,opt,name=close_reason,json=closeReason,proto3,oneof"`
}

type Misc_RefreshVideo struct {
	RefreshVideo bool `protobuf:"varint,10,opt,name=refresh_video,json=refreshVideo,proto3,oneof"`
}

type Misc_VideoReceived struct {
	VideoReceived bool `protobuf:"varint,12,opt,name=video_received,json=videoReceived,proto3,oneof"`
}

type Misc_BackNotification struct {
	BackNotification *BackNotification `protobuf:"bytes,13,opt,name=back_notification,json=backNotification,proto3,oneof"`
}

type Misc_RestartRemoteDevice struct {
	RestartRemoteDevice bool `protobuf:"varint,14,opt,name=restart_remote_device,json=restartRemoteDevice,proto3,oneof"`
}

type Misc_Uac struct {
	Uac bool `protobuf:"varint,15,opt,name=uac,proto3,oneof"`
}

type Misc_ForegroundWindowElevated struct {
	ForegroundWindowElevated bool `protobuf:"varint,16,opt,name=foreground_window_elevated,json=foregroundWindowElevated,proto3,oneof"`
}

type Misc_StopService struct {
	StopService bool `protobuf:"varint,17,opt,name=stop_service,json=stopService,proto3,oneof"`
}

type Misc_ElevationRequest struct {
	ElevationRequest *ElevationRequest `protobuf:"bytes,18,opt,name=elevation_request,json=elevationRequest,proto3,oneof"`
}

type Misc_ElevationResponse struct {
	ElevationResponse string `protobuf:"bytes,19,opt,name=elevation_response,json=elevationResponse,proto3,oneof"`
}

type Misc_PortableServiceRunning struct {
	PortableServiceRunning bool `protobuf:"varint,20,opt,name=portable_service_running,json=portableServiceRunning,proto3,oneof"`
}

type Misc_SwitchSidesRequest struct {
	SwitchSidesRequest *SwitchSidesRequest `protobuf:"bytes,21,opt,name=switch_sides_request,json=switchSidesRequest,proto3,oneof"`
}

type Misc_SwitchBack struct {
	SwitchBack *SwitchBack `protobuf:"bytes,22,opt,name=switch_back,json=switchBack,proto3,oneof"`
}

type Misc_ChangeResolution struct {
	// Deprecated since 1.2.4, use `change_display_resolution` (36) instead.
	// But we must keep it for compatibility when peer version < 1.2.4.
	ChangeResolution *Resolution `protobuf:"bytes,24,opt,name=change_resolution,json=changeResolution,proto3,oneof"`
}

type Misc_PluginRequest struct {
	PluginRequest *PluginRequest `protobuf:"bytes,25,opt,name=plugin_request,json=pluginRequest,proto3,oneof"`
}

type Misc_PluginFailure struct {
	PluginFailure *PluginFailure `protobuf:"bytes,26,opt,name=plugin_failure,json=pluginFailure,proto3,oneof"`
}

type Misc_FullSpeedFps struct {
	FullSpeedFps uint32 `protobuf:"varint,27,opt,name=full_speed_fps,json=fullSpeedFps,proto3,oneof"` // deprecated
}

type Misc_AutoAdjustFps struct {
	AutoAdjustFps uint32 `protobuf:"varint,28,opt,name=auto_adjust_fps,json=autoAdjustFps,proto3,oneof"`
}

type Misc_ClientRecordStatus struct {
	ClientRecordStatus bool `protobuf:"varint,29,opt,name=client_record_status,json=clientRecordStatus,proto3,oneof"`
}

type Misc_CaptureDisplays struct {
	CaptureDisplays *CaptureDisplays `protobuf:"bytes,30,opt,name=capture_displays,json=captureDisplays,proto3,oneof"`
}

type Misc_RefreshVideoDisplay struct {
	RefreshVideoDisplay int32 `protobuf:"varint,31,opt,name=refresh_video_display,json=refreshVideoDisplay,proto3,oneof"`
}

type Misc_ToggleVirtualDisplay struct {
	ToggleVirtualDisplay *ToggleVirtualDisplay `protobuf:"bytes,32,opt,name=toggle_virtual_display,json=toggleVirtualDisplay,proto3,oneof"`
}

type Misc_TogglePrivacyMode struct {
	TogglePrivacyMode *TogglePrivacyMode `protobuf:"bytes,33,opt,name=toggle_privacy_mode,json=togglePrivacyMode,proto3,oneof"`
}

type Misc_SupportedEncoding struct {
	SupportedEncoding *SupportedEncoding `protobuf:"bytes,34,opt,name=supported_encoding,json=supportedEncoding,proto3,oneof"`
}

type Misc_SelectedSid struct {
	SelectedSid uint32 `protobuf:"varint,35,opt,name=selected_sid,json=selectedSid,proto3,oneof"`
}

type Misc_ChangeDisplayResolution struct {
	ChangeDisplayResolution *DisplayResolution `protobuf:"bytes,36,opt,name=change_display_resolution,json=changeDisplayResolution,proto3,oneof"`
}

type Misc_MessageQuery struct {
	MessageQuery *MessageQuery `protobuf:"bytes,37,opt,name=message_query,json=messageQuery,proto3,oneof"`
}

type Misc_FollowCurrentDisplay struct {
	FollowCurrentDisplay int32 `protobuf:"varint,38,opt,name=follow_current_display,json=followCurrentDisplay,proto3,oneof"`
}

func (*Misc_ChatMessage) isMisc_Union() {}

func (*Misc_SwitchDisplay) isMisc_Union() {}

func (*Misc_PermissionInfo) isMisc_Union() {}

func (*Misc_Option) isMisc_Union() {}

func (*Misc_AudioFormat) isMisc_Union() {}

func (*Misc_CloseReason) isMisc_Union() {}

func (*Misc_RefreshVideo) isMisc_Union() {}

func (*Misc_VideoReceived) isMisc_Union() {}

func (*Misc_BackNotification) isMisc_Union() {}

func (*Misc_RestartRemoteDevice) isMisc_Union() {}

func (*Misc_Uac) isMisc_Union() {}

func (*Misc_ForegroundWindowElevated) isMisc_Union() {}

func (*Misc_StopService) isMisc_Union() {}

func (*Misc_ElevationRequest) isMisc_Union() {}

func (*Misc_ElevationResponse) isMisc_Union() {}

func (*Misc_PortableServiceRunning) isMisc_Union() {}

func (*Misc_SwitchSidesRequest) isMisc_Union() {}

func (*Misc_SwitchBack) isMisc_Union() {}

func (*Misc_ChangeResolution) isMisc_Union() {}

func (*Misc_PluginRequest) isMisc_Union() {}

func (*Misc_PluginFailure) isMisc_Union() {}

func (*Misc_FullSpeedFps) isMisc_Union() {}

func (*Misc_AutoAdjustFps) isMisc_Union() {}

func (*Misc_ClientRecordStatus) isMisc_Union() {}

func (*Misc_CaptureDisplays) isMisc_Union() {}

func (*Misc_RefreshVideoDisplay) isMisc_Union() {}

func (*Misc_ToggleVirtualDisplay) isMisc_Union() {}

func (*Misc_TogglePrivacyMode) isMisc_Union() {}

func (*Misc_SupportedEncoding) isMisc_Union() {}

func (*Misc_SelectedSid) isMisc_Union() {}

func (*Misc_ChangeDisplayResolution) isMisc_Union() {}

func (*Misc_MessageQuery) isMisc_Union() {}

func (*Misc_FollowCurrentDisplay) isMisc_Union() {}

type VoiceCallRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	ReqTimestamp int64                  `protobuf:"varint,1,opt,name=req_timestamp,json=reqTimestamp,proto3" json:"req_timestamp,omitempty"`
	// Indicates whether the request is a connect action or a disconnect action.
	IsConnect     bool `protobuf:"varint,2,opt,name=is_connect,json=isConnect,proto3" json:"is_connect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoiceCallRequest) Reset() {
	*x = VoiceCallRequest{}
	mi := &file_message_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallRequest) ProtoMessage() {}

func (x *VoiceCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallRequest.ProtoReflect.Descriptor instead.
func (*VoiceCallRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{90}
}

func (x *VoiceCallRequest) GetReqTimestamp() int64 {
	if x != nil {
		return x.ReqTimestamp
	}
	return 0
}

func (x *VoiceCallRequest) GetIsConnect() bool {
	if x != nil {
		return x.IsConnect
	}
	return false
}

type VoiceCallResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	ReqTimestamp  int64                  `protobuf:"varint,2,opt,name=req_timestamp,json=reqTimestamp,proto3" json:"req_timestamp,omitempty"` // Should copy from [VoiceCallRequest::req_timestamp].
	AckTimestamp  int64                  `protobuf:"varint,3,opt,name=ack_timestamp,json=ackTimestamp,proto3" json:"ack_timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoiceCallResponse) Reset() {
	*x = VoiceCallResponse{}
	mi := &file_message_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoiceCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallResponse) ProtoMessage() {}

func (x *VoiceCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallResponse.ProtoReflect.Descriptor instead.
func (*VoiceCallResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{91}
}

func (x *VoiceCallResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *VoiceCallResponse) GetReqTimestamp() int64 {
	if x != nil {
		return x.ReqTimestamp
	}
	return 0
}

func (x *VoiceCallResponse) GetAckTimestamp() int64 {
	if x != nil {
		return x.AckTimestamp
	}
	return 0
}

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Union:
	//
	//	*Message_SignedId
	//	*Message_PublicKey
	//	*Message_TestDelay
	//	*Message_VideoFrame
	//	*Message_LoginRequest
	//	*Message_LoginResponse
	//	*Message_Hash
	//	*Message_MouseEvent
	//	*Message_AudioFrame
	//	*Message_CursorData
	//	*Message_CursorPosition
	//	*Message_CursorId
	//	*Message_KeyEvent
	//	*Message_Clipboard
	//	*Message_FileAction
	//	*Message_FileResponse
	//	*Message_Misc
	//	*Message_Cliprdr
	//	*Message_MessageBox
	//	*Message_SwitchSidesResponse
	//	*Message_VoiceCallRequest
	//	*Message_VoiceCallResponse
	//	*Message_PeerInfo
	//	*Message_PointerDeviceEvent
	//	*Message_Auth_2Fa
	//	*Message_MultiClipboards
	Union         isMessage_Union `protobuf_oneof:"union"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_message_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{92}
}

func (x *Message) GetUnion() isMessage_Union {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *Message) GetSignedId() *SignedId {
	if x != nil {
		if x, ok := x.Union.(*Message_SignedId); ok {
			return x.SignedId
		}
	}
	return nil
}

func (x *Message) GetPublicKey() *PublicKey {
	if x != nil {
		if x, ok := x.Union.(*Message_PublicKey); ok {
			return x.PublicKey
		}
	}
	return nil
}

func (x *Message) GetTestDelay() *TestDelay {
	if x != nil {
		if x, ok := x.Union.(*Message_TestDelay); ok {
			return x.TestDelay
		}
	}
	return nil
}

func (x *Message) GetVideoFrame() *VideoFrame {
	if x != nil {
		if x, ok := x.Union.(*Message_VideoFrame); ok {
			return x.VideoFrame
		}
	}
	return nil
}

func (x *Message) GetLoginRequest() *LoginRequest {
	if x != nil {
		if x, ok := x.Union.(*Message_LoginRequest); ok {
			return x.LoginRequest
		}
	}
	return nil
}

func (x *Message) GetLoginResponse() *LoginResponse {
	if x != nil {
		if x, ok := x.Union.(*Message_LoginResponse); ok {
			return x.LoginResponse
		}
	}
	return nil
}

func (x *Message) GetHash() *Hash {
	if x != nil {
		if x, ok := x.Union.(*Message_Hash); ok {
			return x.Hash
		}
	}
	return nil
}

func (x *Message) GetMouseEvent() *MouseEvent {
	if x != nil {
		if x, ok := x.Union.(*Message_MouseEvent); ok {
			return x.MouseEvent
		}
	}
	return nil
}

func (x *Message) GetAudioFrame() *AudioFrame {
	if x != nil {
		if x, ok := x.Union.(*Message_AudioFrame); ok {
			return x.AudioFrame
		}
	}
	return nil
}

func (x *Message) GetCursorData() *CursorData {
	if x != nil {
		if x, ok := x.Union.(*Message_CursorData); ok {
			return x.CursorData
		}
	}
	return nil
}

func (x *Message) GetCursorPosition() *CursorPosition {
	if x != nil {
		if x, ok := x.Union.(*Message_CursorPosition); ok {
			return x.CursorPosition
		}
	}
	return nil
}

func (x *Message) GetCursorId() uint64 {
	if x != nil {
		if x, ok := x.Union.(*Message_CursorId); ok {
			return x.CursorId
		}
	}
	return 0
}

func (x *Message) GetKeyEvent() *KeyEvent {
	if x != nil {
		if x, ok := x.Union.(*Message_KeyEvent); ok {
			return x.KeyEvent
		}
	}
	return nil
}

func (x *Message) GetClipboard() *Clipboard {
	if x != nil {
		if x, ok := x.Union.(*Message_Clipboard); ok {
			return x.Clipboard
		}
	}
	return nil
}

func (x *Message) GetFileAction() *FileAction {
	if x != nil {
		if x, ok := x.Union.(*Message_FileAction); ok {
			return x.FileAction
		}
	}
	return nil
}

func (x *Message) GetFileResponse() *FileResponse {
	if x != nil {
		if x, ok := x.Union.(*Message_FileResponse); ok {
			return x.FileResponse
		}
	}
	return nil
}

func (x *Message) GetMisc() *Misc {
	if x != nil {
		if x, ok := x.Union.(*Message_Misc); ok {
			return x.Misc
		}
	}
	return nil
}

func (x *Message) GetCliprdr() *Cliprdr {
	if x != nil {
		if x, ok := x.Union.(*Message_Cliprdr); ok {
			return x.Cliprdr
		}
	}
	return nil
}

func (x *Message) GetMessageBox() *MessageBox {
	if x != nil {
		if x, ok := x.Union.(*Message_MessageBox); ok {
			return x.MessageBox
		}
	}
	return nil
}

func (x *Message) GetSwitchSidesResponse() *SwitchSidesResponse {
	if x != nil {
		if x, ok := x.Union.(*Message_SwitchSidesResponse); ok {
			return x.SwitchSidesResponse
		}
	}
	return nil
}

func (x *Message) GetVoiceCallRequest() *VoiceCallRequest {
	if x != nil {
		if x, ok := x.Union.(*Message_VoiceCallRequest); ok {
			return x.VoiceCallRequest
		}
	}
	return nil
}

func (x *Message) GetVoiceCallResponse() *VoiceCallResponse {
	if x != nil {
		if x, ok := x.Union.(*Message_VoiceCallResponse); ok {
			return x.VoiceCallResponse
		}
	}
	return nil
}

func (x *Message) GetPeerInfo() *PeerInfo {
	if x != nil {
		if x, ok := x.Union.(*Message_PeerInfo); ok {
			return x.PeerInfo
		}
	}
	return nil
}

func (x *Message) GetPointerDeviceEvent() *PointerDeviceEvent {
	if x != nil {
		if x, ok := x.Union.(*Message_PointerDeviceEvent); ok {
			return x.PointerDeviceEvent
		}
	}
	return nil
}

func (x *Message) GetAuth_2Fa() *Auth2FA {
	if x != nil {
		if x, ok := x.Union.(*Message_Auth_2Fa); ok {
			return x.Auth_2Fa
		}
	}
	return nil
}

func (x *Message) GetMultiClipboards() *MultiClipboards {
	if x != nil {
		if x, ok := x.Union.(*Message_MultiClipboards); ok {
			return x.MultiClipboards
		}
	}
	return nil
}

type isMessage_Union interface {
	isMessage_Union()
}

type Message_SignedId struct {
	SignedId *SignedId `protobuf:"bytes,3,opt,name=signed_id,json=signedId,proto3,oneof"`
}

type Message_PublicKey struct {
	PublicKey *PublicKey `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type Message_TestDelay struct {
	TestDelay *TestDelay `protobuf:"bytes,5,opt,name=test_delay,json=testDelay,proto3,oneof"`
}

type Message_VideoFrame struct {
	VideoFrame *VideoFrame `protobuf:"bytes,6,opt,name=video_frame,json=videoFrame,proto3,oneof"`
}

type Message_LoginRequest struct {
	LoginRequest *LoginRequest `protobuf:"bytes,7,opt,name=login_request,json=loginRequest,proto3,oneof"`
}

type Message_LoginResponse struct {
	LoginResponse *LoginResponse `protobuf:"bytes,8,opt,name=login_response,json=loginResponse,proto3,oneof"`
}

type Message_Hash struct {
	Hash *Hash `protobuf:"bytes,9,opt,name=hash,proto3,oneof"`
}

type Message_MouseEvent struct {
	MouseEvent *MouseEvent `protobuf:"bytes,10,opt,name=mouse_event,json=mouseEvent,proto3,oneof"`
}

type Message_AudioFrame struct {
	AudioFrame *AudioFrame `protobuf:"bytes,11,opt,name=audio_frame,json=audioFrame,proto3,oneof"`
}

type Message_CursorData struct {
	CursorData *CursorData `protobuf:"bytes,12,opt,name=cursor_data,json=cursorData,proto3,oneof"`
}

type Message_CursorPosition struct {
	CursorPosition *CursorPosition `protobuf:"bytes,13,opt,name=cursor_position,json=cursorPosition,proto3,oneof"`
}

type Message_CursorId struct {
	CursorId uint64 `protobuf:"varint,14,opt,name=cursor_id,json=cursorId,proto3,oneof"`
}

type Message_KeyEvent struct {
	KeyEvent *KeyEvent `protobuf:"bytes,15,opt,name=key_event,json=keyEvent,proto3,oneof"`
}

type Message_Clipboard struct {
	Clipboard *Clipboard `protobuf:"bytes,16,opt,name=clipboard,proto3,oneof"`
}

type Message_FileAction struct {
	FileAction *FileAction `protobuf:"bytes,17,opt,name=file_action,json=fileAction,proto3,oneof"`
}

type Message_FileResponse struct {
	FileResponse *FileResponse `protobuf:"bytes,18,opt,name=file_response,json=fileResponse,proto3,oneof"`
}

type Message_Misc struct {
	Misc *Misc `protobuf:"bytes,19,opt,name=misc,proto3,oneof"`
}

type Message_Cliprdr struct {
	Cliprdr *Cliprdr `protobuf:"bytes,20,opt,name=cliprdr,proto3,oneof"`
}

type Message_MessageBox struct {
	MessageBox *MessageBox `protobuf:"bytes,21,opt,name=message_box,json=messageBox,proto3,oneof"`
}

type Message_SwitchSidesResponse struct {
	SwitchSidesResponse *SwitchSidesResponse `protobuf:"bytes,22,opt,name=switch_sides_response,json=switchSidesResponse,proto3,oneof"`
}

type Message_VoiceCallRequest struct {
	VoiceCallRequest *VoiceCallRequest `protobuf:"bytes,23,opt,name=voice_call_request,json=voiceCallRequest,proto3,oneof"`
}

type Message_VoiceCallResponse struct {
	VoiceCallResponse *VoiceCallResponse `protobuf:"bytes,24,opt,name=voice_call_response,json=voiceCallResponse,proto3,oneof"`
}

type Message_PeerInfo struct {
	PeerInfo *PeerInfo `protobuf:"bytes,25,opt,name=peer_info,json=peerInfo,proto3,oneof"`
}

type Message_PointerDeviceEvent struct {
	PointerDeviceEvent *PointerDeviceEvent `protobuf:"bytes,26,opt,name=pointer_device_event,json=pointerDeviceEvent,proto3,oneof"`
}

type Message_Auth_2Fa struct {
	Auth_2Fa *Auth2FA `protobuf:"bytes,27,opt,name=auth_2fa,json=auth2fa,proto3,oneof"`
}

type Message_MultiClipboards struct {
	MultiClipboards *MultiClipboards `protobuf:"bytes,28,opt,name=multi_clipboards,json=multiClipboards,proto3,oneof"`
}

func (*Message_SignedId) isMessage_Union() {}

func (*Message_PublicKey) isMessage_Union() {}

func (*Message_TestDelay) isMessage_Union() {}

func (*Message_VideoFrame) isMessage_Union() {}

func (*Message_LoginRequest) isMessage_Union() {}

func (*Message_LoginResponse) isMessage_Union() {}

func (*Message_Hash) isMessage_Union() {}

func (*Message_MouseEvent) isMessage_Union() {}

func (*Message_AudioFrame) isMessage_Union() {}

func (*Message_CursorData) isMessage_Union() {}

func (*Message_CursorPosition) isMessage_Union() {}

func (*Message_CursorId) isMessage_Union() {}

func (*Message_KeyEvent) isMessage_Union() {}

func (*Message_Clipboard) isMessage_Union() {}

func (*Message_FileAction) isMessage_Union() {}

func (*Message_FileResponse) isMessage_Union() {}

func (*Message_Misc) isMessage_Union() {}

func (*Message_Cliprdr) isMessage_Union() {}

func (*Message_MessageBox) isMessage_Union() {}

func (*Message_SwitchSidesResponse) isMessage_Union() {}

func (*Message_VoiceCallRequest) isMessage_Union() {}

func (*Message_VoiceCallResponse) isMessage_Union() {}

func (*Message_PeerInfo) isMessage_Union() {}

func (*Message_PointerDeviceEvent) isMessage_Union() {}

func (*Message_Auth_2Fa) isMessage_Union() {}

func (*Message_MultiClipboards) isMessage_Union() {}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x68, 0x62, 0x62, 0x22, 0x4b, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x74,
	0x73, 0x22, 0x44, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x03, 0x52, 0x47, 0x42, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x03, 0x59, 0x55,
	0x56, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x64, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x76, 0x70, 0x39, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x76,
	0x70, 0x39, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x72, 0x67, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x47, 0x42, 0x48, 0x00, 0x52, 0x03, 0x72, 0x67,
	0x62, 0x12, 0x1c, 0x0a, 0x03, 0x79, 0x75, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x59, 0x55, 0x56, 0x48, 0x00, 0x52, 0x03, 0x79, 0x75, 0x76, 0x12,
	0x2f, 0x0a, 0x05, 0x68, 0x32, 0x36, 0x34, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x68, 0x32, 0x36, 0x34, 0x73,
	0x12, 0x2f, 0x0a, 0x05, 0x68, 0x32, 0x36, 0x35, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x68, 0x32, 0x36, 0x35,
	0x73, 0x12, 0x2d, 0x0a, 0x04, 0x76, 0x70, 0x38, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x76, 0x70, 0x38, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x61, 0x76, 0x31, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x61, 0x76, 0x31, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x04, 0x49, 0x64, 0x50, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x70, 0x6b, 0x22, 0x84, 0x02, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x22, 0x35, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x41, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x0c, 0x0a, 0x0a, 0x56,
	0x69, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x22, 0x41, 0x0a, 0x07, 0x4f, 0x53, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x93, 0x04, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x32, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x6f,
	0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x68, 0x62, 0x62, 0x2e, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x6f, 0x73, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x79, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x77, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x77, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x77, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x77, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2d, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x70, 0x38, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x76, 0x70, 0x38, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x70, 0x39,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x76, 0x70, 0x39, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x76, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x76, 0x31, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x32, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x32, 0x36,
	0x34, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x32, 0x36, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x68, 0x32, 0x36, 0x35, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x32, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x32, 0x36, 0x34, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x32, 0x36, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68,
	0x32, 0x36, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x70, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x76, 0x70, 0x38, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x61, 0x76, 0x31, 0x12, 0x25, 0x0a, 0x04, 0x69, 0x34, 0x34, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x04, 0x69, 0x34, 0x34, 0x34, 0x22, 0xfc,
	0x03, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x2c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x10,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36, 0x0a,
	0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x10,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x79, 0x22, 0x2c, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x61, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x79, 0x22, 0x29, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x61, 0x6e, 0x45, 0x6e, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0xe7, 0x01, 0x0a,
	0x0a, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x61,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x61, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x50, 0x61, 0x6e,
	0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x0b, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x0a, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x03, 0x63, 0x68, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x03, 0x63, 0x68, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x32, 0x77, 0x69, 0x6e,
	0x5f, 0x68, 0x6f, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0d, 0x77, 0x69, 0x6e, 0x32, 0x77, 0x69, 0x6e, 0x48, 0x6f, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b,
	0x65, 0x79, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01,
	0x0a, 0x0a, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x68, 0x6f, 0x74, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04,
	0x68, 0x6f, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x2c, 0x0a, 0x0e, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x79, 0x22, 0x38, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c,
	0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x70,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5d,
	0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x44, 0x0a,
	0x07, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x22, 0x4a, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x44, 0x69, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22,
	0x5e, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x0a,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x73, 0x22,
	0x59, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x04, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x44, 0x69, 0x72, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x44, 0x69,
	0x72, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x6c, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x06,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x44, 0x69, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x44, 0x69, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x24,
	0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x2e, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x44, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x6c,
	0x6b, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x7f, 0x0a, 0x17, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x1f,
	0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6b, 0x42,
	0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x62, 0x62, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x4f, 0x0a,
	0x0e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x33,
	0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x6c,
	0x69, 0x70, 0x72, 0x64, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x47, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x1f,
	0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x50, 0x0a, 0x1e,
	0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x22, 0x5f,
	0x0a, 0x1f, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xb1, 0x02, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x77,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x77,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x67, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x62, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1b, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x54, 0x72,
	0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xf6, 0x04, 0x0a, 0x07, 0x43, 0x6c, 0x69, 0x70, 0x72,
	0x64, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x62, 0x62, 0x2e,
	0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72,
	0x64, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c,
	0x69, 0x70, 0x72, 0x64, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72,
	0x64, 0x72, 0x54, 0x72, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72,
	0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22,
	0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5e, 0x0a, 0x11, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x14, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x40, 0x0a,
	0x14, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x22,
	0x3e, 0x0a, 0x11, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x22,
	0xe2, 0x01, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x70,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x10, 0x08, 0x22, 0x99, 0x03, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x70, 0x39, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x70, 0x39, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x32, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x32, 0x36, 0x34, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x32, 0x36, 0x35, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x32, 0x36,
	0x35, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x70, 0x38, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x56, 0x70, 0x38, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x76, 0x31, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x76, 0x31, 0x12,
	0x25, 0x0a, 0x04, 0x69, 0x34, 0x34, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x62, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x04, 0x69, 0x34, 0x34, 0x34, 0x12, 0x30, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x68, 0x62, 0x62, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x22, 0x46, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x50, 0x39, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x32,
	0x36, 0x34, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x32, 0x36, 0x35, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x56, 0x50, 0x38, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x31, 0x10, 0x05,
	0x22, 0xc0, 0x08, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x16, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x6b, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x4b,
	0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x42, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x4f, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x45, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x4f, 0x0a, 0x14, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x4f, 0x0a, 0x14, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x22, 0x29, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x6f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x65,
	0x73, 0x10, 0x02, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x09,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x0a,
	0x08, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x0b, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xe1, 0x04,
	0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x70,
	0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x70,
	0x6c, 0x4b, 0x65, 0x79, 0x22, 0x72, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x6c, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x6c, 0x6b, 0x4f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x6c, 0x6b, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x6c, 0x6b, 0x4f, 0x66, 0x66, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x6c, 0x6b, 0x4f, 0x66, 0x66,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x72, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x76, 0x4f, 0x6e, 0x42, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x76, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x76,
	0x4f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x72, 0x76, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x76, 0x4f, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x72, 0x76, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x72, 0x76, 0x4f, 0x66, 0x66, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10,
	0x08, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x76, 0x4f, 0x66, 0x66, 0x42, 0x79, 0x50, 0x65, 0x65,
	0x72, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x76, 0x4f, 0x66, 0x66, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x76, 0x4f, 0x66, 0x66, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x0b, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x19, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f,
	0x67, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x4c, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x02, 0x6c, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x6c, 0x72, 0x22, 0x0c, 0x0a,
	0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x22, 0x39, 0x0a, 0x0d, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x63, 0x0a,
	0x0f, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x64, 0x22, 0x35, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0xd2, 0x0e, 0x0a, 0x04, 0x4d, 0x69,
	0x73, 0x63, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x27, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x75, 0x61, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x75, 0x61, 0x63,
	0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x18,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x66,
	0x75, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x46, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x66, 0x70, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x46, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x13, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52,
	0x14, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x48, 0x0a, 0x13, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x69, 0x64, 0x12, 0x54, 0x0a,
	0x19, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a,
	0x16, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x14, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x56,
	0x0a, 0x10, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x79, 0x0a, 0x11, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xfe, 0x0a, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x32, 0x0a,
	0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4b, 0x65,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x68, 0x62, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x69, 0x73,
	0x63, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x70, 0x72, 0x64, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x78, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x12,
	0x4e, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x62, 0x62, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x62,
	0x62, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b,
	0x0a, 0x14, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68,
	0x62, 0x62, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x32, 0x66, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x68, 0x62, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x32, 0x46, 0x41, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x66, 0x61, 0x12, 0x41, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x68, 0x62, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x69, 0x70,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x2a, 0x1c, 0x0a, 0x06, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x34, 0x32, 0x30, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x34, 0x34, 0x34, 0x10, 0x01,
	0x2a, 0x3c, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x61, 0x70, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x03, 0x2a, 0xd4,
	0x07, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c,
	0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x6f, 0x77,
	0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x10, 0x08, 0x12, 0x06, 0x0a,
	0x02, 0x46, 0x31, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x31, 0x30, 0x10, 0x0a, 0x12, 0x07,
	0x0a, 0x03, 0x46, 0x31, 0x31, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x31, 0x32, 0x10, 0x0c,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x32, 0x10, 0x0d, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x33, 0x10, 0x0e,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x34, 0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x35, 0x10, 0x10,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x36, 0x10, 0x11, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x37, 0x10, 0x12,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x38, 0x10, 0x13, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x39, 0x10, 0x14,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65,
	0x66, 0x74, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x18, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x19, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x61, 0x67, 0x65, 0x55, 0x70, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72,
	0x72, 0x6f, 0x77, 0x10, 0x1c, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x68, 0x69, 0x66, 0x74, 0x10, 0x1d,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x61, 0x62, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x70, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10,
	0x20, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x70, 0x61, 0x64, 0x30, 0x10, 0x21, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x70, 0x61, 0x64, 0x31, 0x10, 0x22, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x75, 0x6d, 0x70, 0x61, 0x64, 0x32, 0x10, 0x23, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x70,
	0x61, 0x64, 0x33, 0x10, 0x24, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x70, 0x61, 0x64, 0x34,
	0x10, 0x25, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x70, 0x61, 0x64, 0x35, 0x10, 0x26, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x70, 0x61, 0x64, 0x36, 0x10, 0x27, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x75, 0x6d, 0x70, 0x61, 0x64, 0x37, 0x10, 0x28, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d,
	0x70, 0x61, 0x64, 0x38, 0x10, 0x29, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x70, 0x61, 0x64,
	0x39, 0x10, 0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x2b, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0x2c, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x65,
	0x6e, 0x75, 0x10, 0x2d, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x2e, 0x12,
	0x08, 0x0a, 0x04, 0x4b, 0x61, 0x6e, 0x61, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x61, 0x6e,
	0x67, 0x75, 0x6c, 0x10, 0x30, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x75, 0x6e, 0x6a, 0x61, 0x10, 0x31,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x10, 0x32, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x61, 0x6e, 0x6a, 0x61, 0x10, 0x33, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x61, 0x6e, 0x6a, 0x69, 0x10,
	0x34, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x10, 0x35, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x36, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x10, 0x38, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x10, 0x39,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x3a, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x65, 0x6c, 0x70, 0x10, 0x3b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x10,
	0x3c, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x3d,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x10, 0x3e, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x3f, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x57, 0x69,
	0x6e, 0x10, 0x40, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x70, 0x70, 0x73, 0x10, 0x41, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x10, 0x42, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x10, 0x43, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x45, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x10, 0x46, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x73, 0x10, 0x47, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x70, 0x61,
	0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x48, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x10, 0x49, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x10, 0x4a, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x6c, 0x74, 0x10, 0x4b, 0x12, 0x0e, 0x0a, 0x0a,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x10, 0x4c, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x70, 0x10, 0x4d, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x4e, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x10, 0x4f, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x74, 0x72, 0x6c, 0x41, 0x6c, 0x74,
	0x44, 0x65, 0x6c, 0x10, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x10, 0x65, 0x2a, 0x66, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x74, 0x66, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x74, 0x6d, 0x6c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x67,
	0x62, 0x61, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6e, 0x67,
	0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x76, 0x67, 0x10, 0x17,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x1f, 0x2a, 0x46, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x69, 0x72,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x69, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x10, 0x05, 0x2a, 0x3b, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x65, 0x73, 0x74,
	0x10, 0x04, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x75, 0x69, 0x7a, 0x69, 0x6e, 0x61, 0x6d, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x2d, 0x72, 0x75, 0x73, 0x74, 0x64, 0x65, 0x73, 0x6b, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData []byte
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_proto_rawDesc), len(file_message_proto_rawDesc)))
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_message_proto_goTypes = []any{
	(Chroma)(0),                             // 0: hbb.Chroma
	(KeyboardMode)(0),                       // 1: hbb.KeyboardMode
	(ControlKey)(0),                         // 2: hbb.ControlKey
	(ClipboardFormat)(0),                    // 3: hbb.ClipboardFormat
	(FileType)(0),                           // 4: hbb.FileType
	(ImageQuality)(0),                       // 5: hbb.ImageQuality
	(PermissionInfo_Permission)(0),          // 6: hbb.PermissionInfo.Permission
	(SupportedDecoding_PreferCodec)(0),      // 7: hbb.SupportedDecoding.PreferCodec
	(OptionMessage_BoolOption)(0),           // 8: hbb.OptionMessage.BoolOption
	(BackNotification_BlockInputState)(0),   // 9: hbb.BackNotification.BlockInputState
	(BackNotification_PrivacyModeState)(0),  // 10: hbb.BackNotification.PrivacyModeState
	(*EncodedVideoFrame)(nil),               // 11: hbb.EncodedVideoFrame
	(*EncodedVideoFrames)(nil),              // 12: hbb.EncodedVideoFrames
	(*RGB)(nil),                             // 13: hbb.RGB
	(*YUV)(nil),                             // 14: hbb.YUV
	(*VideoFrame)(nil),                      // 15: hbb.VideoFrame
	(*IdPk)(nil),                            // 16: hbb.IdPk
	(*DisplayInfo)(nil),                     // 17: hbb.DisplayInfo
	(*PortForward)(nil),                     // 18: hbb.PortForward
	(*FileTransfer)(nil),                    // 19: hbb.FileTransfer
	(*ViewCamera)(nil),                      // 20: hbb.ViewCamera
	(*OSLogin)(nil),                         // 21: hbb.OSLogin
	(*LoginRequest)(nil),                    // 22: hbb.LoginRequest
	(*Auth2FA)(nil),                         // 23: hbb.Auth2FA
	(*ChatMessage)(nil),                     // 24: hbb.ChatMessage
	(*Features)(nil),                        // 25: hbb.Features
	(*CodecAbility)(nil),                    // 26: hbb.CodecAbility
	(*SupportedEncoding)(nil),               // 27: hbb.SupportedEncoding
	(*PeerInfo)(nil),                        // 28: hbb.PeerInfo
	(*WindowsSession)(nil),                  // 29: hbb.WindowsSession
	(*LoginResponse)(nil),                   // 30: hbb.LoginResponse
	(*TouchScaleUpdate)(nil),                // 31: hbb.TouchScaleUpdate
	(*TouchPanStart)(nil),                   // 32: hbb.TouchPanStart
	(*TouchPanUpdate)(nil),                  // 33: hbb.TouchPanUpdate
	(*TouchPanEnd)(nil),                     // 34: hbb.TouchPanEnd
	(*TouchEvent)(nil),                      // 35: hbb.TouchEvent
	(*PointerDeviceEvent)(nil),              // 36: hbb.PointerDeviceEvent
	(*MouseEvent)(nil),                      // 37: hbb.MouseEvent
	(*KeyEvent)(nil),                        // 38: hbb.KeyEvent
	(*CursorData)(nil),                      // 39: hbb.CursorData
	(*CursorPosition)(nil),                  // 40: hbb.CursorPosition
	(*Hash)(nil),                            // 41: hbb.Hash
	(*Clipboard)(nil),                       // 42: hbb.Clipboard
	(*MultiClipboards)(nil),                 // 43: hbb.MultiClipboards
	(*FileEntry)(nil),                       // 44: hbb.FileEntry
	(*FileDirectory)(nil),                   // 45: hbb.FileDirectory
	(*ReadDir)(nil),                         // 46: hbb.ReadDir
	(*ReadEmptyDirs)(nil),                   // 47: hbb.ReadEmptyDirs
	(*ReadEmptyDirsResponse)(nil),           // 48: hbb.ReadEmptyDirsResponse
	(*ReadAllFiles)(nil),                    // 49: hbb.ReadAllFiles
	(*FileRename)(nil),                      // 50: hbb.FileRename
	(*FileAction)(nil),                      // 51: hbb.FileAction
	(*FileTransferCancel)(nil),              // 52: hbb.FileTransferCancel
	(*FileResponse)(nil),                    // 53: hbb.FileResponse
	(*FileTransferDigest)(nil),              // 54: hbb.FileTransferDigest
	(*FileTransferBlock)(nil),               // 55: hbb.FileTransferBlock
	(*FileTransferError)(nil),               // 56: hbb.FileTransferError
	(*FileTransferSendRequest)(nil),         // 57: hbb.FileTransferSendRequest
	(*FileTransferSendConfirmRequest)(nil),  // 58: hbb.FileTransferSendConfirmRequest
	(*FileTransferDone)(nil),                // 59: hbb.FileTransferDone
	(*FileTransferReceiveRequest)(nil),      // 60: hbb.FileTransferReceiveRequest
	(*FileRemoveDir)(nil),                   // 61: hbb.FileRemoveDir
	(*FileRemoveFile)(nil),                  // 62: hbb.FileRemoveFile
	(*FileDirCreate)(nil),                   // 63: hbb.FileDirCreate
	(*CliprdrMonitorReady)(nil),             // 64: hbb.CliprdrMonitorReady
	(*CliprdrFormat)(nil),                   // 65: hbb.CliprdrFormat
	(*CliprdrServerFormatList)(nil),         // 66: hbb.CliprdrServerFormatList
	(*CliprdrServerFormatListResponse)(nil), // 67: hbb.CliprdrServerFormatListResponse
	(*CliprdrServerFormatDataRequest)(nil),  // 68: hbb.CliprdrServerFormatDataRequest
	(*CliprdrServerFormatDataResponse)(nil), // 69: hbb.CliprdrServerFormatDataResponse
	(*CliprdrFileContentsRequest)(nil),      // 70: hbb.CliprdrFileContentsRequest
	(*CliprdrFileContentsResponse)(nil),     // 71: hbb.CliprdrFileContentsResponse
	(*CliprdrTryEmpty)(nil),                 // 72: hbb.CliprdrTryEmpty
	(*Cliprdr)(nil),                         // 73: hbb.Cliprdr
	(*Resolution)(nil),                      // 74: hbb.Resolution
	(*DisplayResolution)(nil),               // 75: hbb.DisplayResolution
	(*SupportedResolutions)(nil),            // 76: hbb.SupportedResolutions
	(*SwitchDisplay)(nil),                   // 77: hbb.SwitchDisplay
	(*CaptureDisplays)(nil),                 // 78: hbb.CaptureDisplays
	(*ToggleVirtualDisplay)(nil),            // 79: hbb.ToggleVirtualDisplay
	(*TogglePrivacyMode)(nil),               // 80: hbb.TogglePrivacyMode
	(*PermissionInfo)(nil),                  // 81: hbb.PermissionInfo
	(*SupportedDecoding)(nil),               // 82: hbb.SupportedDecoding
	(*OptionMessage)(nil),                   // 83: hbb.OptionMessage
	(*TestDelay)(nil),                       // 84: hbb.TestDelay
	(*PublicKey)(nil),                       // 85: hbb.PublicKey
	(*SignedId)(nil),                        // 86: hbb.SignedId
	(*AudioFormat)(nil),                     // 87: hbb.AudioFormat
	(*AudioFrame)(nil),                      // 88: hbb.AudioFrame
	(*MessageBox)(nil),                      // 89: hbb.MessageBox
	(*BackNotification)(nil),                // 90: hbb.BackNotification
	(*ElevationRequestWithLogon)(nil),       // 91: hbb.ElevationRequestWithLogon
	(*ElevationRequest)(nil),                // 92: hbb.ElevationRequest
	(*SwitchSidesRequest)(nil),              // 93: hbb.SwitchSidesRequest
	(*SwitchSidesResponse)(nil),             // 94: hbb.SwitchSidesResponse
	(*SwitchBack)(nil),                      // 95: hbb.SwitchBack
	(*PluginRequest)(nil),                   // 96: hbb.PluginRequest
	(*PluginFailure)(nil),                   // 97: hbb.PluginFailure
	(*WindowsSessions)(nil),                 // 98: hbb.WindowsSessions
	(*MessageQuery)(nil),                    // 99: hbb.MessageQuery
	(*Misc)(nil),                            // 100: hbb.Misc
	(*VoiceCallRequest)(nil),                // 101: hbb.VoiceCallRequest
	(*VoiceCallResponse)(nil),               // 102: hbb.VoiceCallResponse
	(*Message)(nil),                         // 103: hbb.Message
}
var file_message_proto_depIdxs = []int32{
	11,  // 0: hbb.EncodedVideoFrames.frames:type_name -> hbb.EncodedVideoFrame
	12,  // 1: hbb.VideoFrame.vp9s:type_name -> hbb.EncodedVideoFrames
	13,  // 2: hbb.VideoFrame.rgb:type_name -> hbb.RGB
	14,  // 3: hbb.VideoFrame.yuv:type_name -> hbb.YUV
	12,  // 4: hbb.VideoFrame.h264s:type_name -> hbb.EncodedVideoFrames
	12,  // 5: hbb.VideoFrame.h265s:type_name -> hbb.EncodedVideoFrames
	12,  // 6: hbb.VideoFrame.vp8s:type_name -> hbb.EncodedVideoFrames
	12,  // 7: hbb.VideoFrame.av1s:type_name -> hbb.EncodedVideoFrames
	74,  // 8: hbb.DisplayInfo.original_resolution:type_name -> hbb.Resolution
	83,  // 9: hbb.LoginRequest.option:type_name -> hbb.OptionMessage
	19,  // 10: hbb.LoginRequest.file_transfer:type_name -> hbb.FileTransfer
	18,  // 11: hbb.LoginRequest.port_forward:type_name -> hbb.PortForward
	20,  // 12: hbb.LoginRequest.view_camera:type_name -> hbb.ViewCamera
	21,  // 13: hbb.LoginRequest.os_login:type_name -> hbb.OSLogin
	26,  // 14: hbb.SupportedEncoding.i444:type_name -> hbb.CodecAbility
	17,  // 15: hbb.PeerInfo.displays:type_name -> hbb.DisplayInfo
	25,  // 16: hbb.PeerInfo.features:type_name -> hbb.Features
	27,  // 17: hbb.PeerInfo.encoding:type_name -> hbb.SupportedEncoding
	76,  // 18: hbb.PeerInfo.resolutions:type_name -> hbb.SupportedResolutions
	98,  // 19: hbb.PeerInfo.windows_sessions:type_name -> hbb.WindowsSessions
	28,  // 20: hbb.LoginResponse.peer_info:type_name -> hbb.PeerInfo
	31,  // 21: hbb.TouchEvent.scale_update:type_name -> hbb.TouchScaleUpdate
	32,  // 22: hbb.TouchEvent.pan_start:type_name -> hbb.TouchPanStart
	33,  // 23: hbb.TouchEvent.pan_update:type_name -> hbb.TouchPanUpdate
	34,  // 24: hbb.TouchEvent.pan_end:type_name -> hbb.TouchPanEnd
	35,  // 25: hbb.PointerDeviceEvent.touch_event:type_name -> hbb.TouchEvent
	2,   // 26: hbb.PointerDeviceEvent.modifiers:type_name -> hbb.ControlKey
	2,   // 27: hbb.MouseEvent.modifiers:type_name -> hbb.ControlKey
	2,   // 28: hbb.KeyEvent.control_key:type_name -> hbb.ControlKey
	2,   // 29: hbb.KeyEvent.modifiers:type_name -> hbb.ControlKey
	1,   // 30: hbb.KeyEvent.mode:type_name -> hbb.KeyboardMode
	3,   // 31: hbb.Clipboard.format:type_name -> hbb.ClipboardFormat
	42,  // 32: hbb.MultiClipboards.clipboards:type_name -> hbb.Clipboard
	4,   // 33: hbb.FileEntry.entry_type:type_name -> hbb.FileType
	44,  // 34: hbb.FileDirectory.entries:type_name -> hbb.FileEntry
	45,  // 35: hbb.ReadEmptyDirsResponse.empty_dirs:type_name -> hbb.FileDirectory
	46,  // 36: hbb.FileAction.read_dir:type_name -> hbb.ReadDir
	57,  // 37: hbb.FileAction.send:type_name -> hbb.FileTransferSendRequest
	60,  // 38: hbb.FileAction.receive:type_name -> hbb.FileTransferReceiveRequest
	63,  // 39: hbb.FileAction.create:type_name -> hbb.FileDirCreate
	61,  // 40: hbb.FileAction.remove_dir:type_name -> hbb.FileRemoveDir
	62,  // 41: hbb.FileAction.remove_file:type_name -> hbb.FileRemoveFile
	49,  // 42: hbb.FileAction.all_files:type_name -> hbb.ReadAllFiles
	52,  // 43: hbb.FileAction.cancel:type_name -> hbb.FileTransferCancel
	58,  // 44: hbb.FileAction.send_confirm:type_name -> hbb.FileTransferSendConfirmRequest
	50,  // 45: hbb.FileAction.rename:type_name -> hbb.FileRename
	47,  // 46: hbb.FileAction.read_empty_dirs:type_name -> hbb.ReadEmptyDirs
	45,  // 47: hbb.FileResponse.dir:type_name -> hbb.FileDirectory
	55,  // 48: hbb.FileResponse.block:type_name -> hbb.FileTransferBlock
	56,  // 49: hbb.FileResponse.error:type_name -> hbb.FileTransferError
	59,  // 50: hbb.FileResponse.done:type_name -> hbb.FileTransferDone
	54,  // 51: hbb.FileResponse.digest:type_name -> hbb.FileTransferDigest
	48,  // 52: hbb.FileResponse.empty_dirs:type_name -> hbb.ReadEmptyDirsResponse
	44,  // 53: hbb.FileTransferReceiveRequest.files:type_name -> hbb.FileEntry
	65,  // 54: hbb.CliprdrServerFormatList.formats:type_name -> hbb.CliprdrFormat
	64,  // 55: hbb.Cliprdr.ready:type_name -> hbb.CliprdrMonitorReady
	66,  // 56: hbb.Cliprdr.format_list:type_name -> hbb.CliprdrServerFormatList
	67,  // 57: hbb.Cliprdr.format_list_response:type_name -> hbb.CliprdrServerFormatListResponse
	68,  // 58: hbb.Cliprdr.format_data_request:type_name -> hbb.CliprdrServerFormatDataRequest
	69,  // 59: hbb.Cliprdr.format_data_response:type_name -> hbb.CliprdrServerFormatDataResponse
	70,  // 60: hbb.Cliprdr.file_contents_request:type_name -> hbb.CliprdrFileContentsRequest
	71,  // 61: hbb.Cliprdr.file_contents_response:type_name -> hbb.CliprdrFileContentsResponse
	72,  // 62: hbb.Cliprdr.try_empty:type_name -> hbb.CliprdrTryEmpty
	74,  // 63: hbb.DisplayResolution.resolution:type_name -> hbb.Resolution
	74,  // 64: hbb.SupportedResolutions.resolutions:type_name -> hbb.Resolution
	76,  // 65: hbb.SwitchDisplay.resolutions:type_name -> hbb.SupportedResolutions
	74,  // 66: hbb.SwitchDisplay.original_resolution:type_name -> hbb.Resolution
	6,   // 67: hbb.PermissionInfo.permission:type_name -> hbb.PermissionInfo.Permission
	7,   // 68: hbb.SupportedDecoding.prefer:type_name -> hbb.SupportedDecoding.PreferCodec
	26,  // 69: hbb.SupportedDecoding.i444:type_name -> hbb.CodecAbility
	0,   // 70: hbb.SupportedDecoding.prefer_chroma:type_name -> hbb.Chroma
	5,   // 71: hbb.OptionMessage.image_quality:type_name -> hbb.ImageQuality
	8,   // 72: hbb.OptionMessage.lock_after_session_end:type_name -> hbb.OptionMessage.BoolOption
	8,   // 73: hbb.OptionMessage.show_remote_cursor:type_name -> hbb.OptionMessage.BoolOption
	8,   // 74: hbb.OptionMessage.privacy_mode:type_name -> hbb.OptionMessage.BoolOption
	8,   // 75: hbb.OptionMessage.block_input:type_name -> hbb.OptionMessage.BoolOption
	8,   // 76: hbb.OptionMessage.disable_audio:type_name -> hbb.OptionMessage.BoolOption
	8,   // 77: hbb.OptionMessage.disable_clipboard:type_name -> hbb.OptionMessage.BoolOption
	8,   // 78: hbb.OptionMessage.enable_file_transfer:type_name -> hbb.OptionMessage.BoolOption
	82,  // 79: hbb.OptionMessage.supported_decoding:type_name -> hbb.SupportedDecoding
	8,   // 80: hbb.OptionMessage.disable_keyboard:type_name -> hbb.OptionMessage.BoolOption
	8,   // 81: hbb.OptionMessage.follow_remote_cursor:type_name -> hbb.OptionMessage.BoolOption
	8,   // 82: hbb.OptionMessage.follow_remote_window:type_name -> hbb.OptionMessage.BoolOption
	8,   // 83: hbb.OptionMessage.disable_camera:type_name -> hbb.OptionMessage.BoolOption
	10,  // 84: hbb.BackNotification.privacy_mode_state:type_name -> hbb.BackNotification.PrivacyModeState
	9,   // 85: hbb.BackNotification.block_input_state:type_name -> hbb.BackNotification.BlockInputState
	91,  // 86: hbb.ElevationRequest.logon:type_name -> hbb.ElevationRequestWithLogon
	22,  // 87: hbb.SwitchSidesResponse.lr:type_name -> hbb.LoginRequest
	29,  // 88: hbb.WindowsSessions.sessions:type_name -> hbb.WindowsSession
	24,  // 89: hbb.Misc.chat_message:type_name -> hbb.ChatMessage
	77,  // 90: hbb.Misc.switch_display:type_name -> hbb.SwitchDisplay
	81,  // 91: hbb.Misc.permission_info:type_name -> hbb.PermissionInfo
	83,  // 92: hbb.Misc.option:type_name -> hbb.OptionMessage
	87,  // 93: hbb.Misc.audio_format:type_name -> hbb.AudioFormat
	90,  // 94: hbb.Misc.back_notification:type_name -> hbb.BackNotification
	92,  // 95: hbb.Misc.elevation_request:type_name -> hbb.ElevationRequest
	93,  // 96: hbb.Misc.switch_sides_request:type_name -> hbb.SwitchSidesRequest
	95,  // 97: hbb.Misc.switch_back:type_name -> hbb.SwitchBack
	74,  // 98: hbb.Misc.change_resolution:type_name -> hbb.Resolution
	96,  // 99: hbb.Misc.plugin_request:type_name -> hbb.PluginRequest
	97,  // 100: hbb.Misc.plugin_failure:type_name -> hbb.PluginFailure
	78,  // 101: hbb.Misc.capture_displays:type_name -> hbb.CaptureDisplays
	79,  // 102: hbb.Misc.toggle_virtual_display:type_name -> hbb.ToggleVirtualDisplay
	80,  // 103: hbb.Misc.toggle_privacy_mode:type_name -> hbb.TogglePrivacyMode
	27,  // 104: hbb.Misc.supported_encoding:type_name -> hbb.SupportedEncoding
	75,  // 105: hbb.Misc.change_display_resolution:type_name -> hbb.DisplayResolution
	99,  // 106: hbb.Misc.message_query:type_name -> hbb.MessageQuery
	86,  // 107: hbb.Message.signed_id:type_name -> hbb.SignedId
	85,  // 108: hbb.Message.public_key:type_name -> hbb.PublicKey
	84,  // 109: hbb.Message.test_delay:type_name -> hbb.TestDelay
	15,  // 110: hbb.Message.video_frame:type_name -> hbb.VideoFrame
	22,  // 111: hbb.Message.login_request:type_name -> hbb.LoginRequest
	30,  // 112: hbb.Message.login_response:type_name -> hbb.LoginResponse
	41,  // 113: hbb.Message.hash:type_name -> hbb.Hash
	37,  // 114: hbb.Message.mouse_event:type_name -> hbb.MouseEvent
	88,  // 115: hbb.Message.audio_frame:type_name -> hbb.AudioFrame
	39,  // 116: hbb.Message.cursor_data:type_name -> hbb.CursorData
	40,  // 117: hbb.Message.cursor_position:type_name -> hbb.CursorPosition
	38,  // 118: hbb.Message.key_event:type_name -> hbb.KeyEvent
	42,  // 119: hbb.Message.clipboard:type_name -> hbb.Clipboard
	51,  // 120: hbb.Message.file_action:type_name -> hbb.FileAction
	53,  // 121: hbb.Message.file_response:type_name -> hbb.FileResponse
	100, // 122: hbb.Message.misc:type_name -> hbb.Misc
	73,  // 123: hbb.Message.cliprdr:type_name -> hbb.Cliprdr
	89,  // 124: hbb.Message.message_box:type_name -> hbb.MessageBox
	94,  // 125: hbb.Message.switch_sides_response:type_name -> hbb.SwitchSidesResponse
	101, // 126: hbb.Message.voice_call_request:type_name -> hbb.VoiceCallRequest
	102, // 127: hbb.Message.voice_call_response:type_name -> hbb.VoiceCallResponse
	28,  // 128: hbb.Message.peer_info:type_name -> hbb.PeerInfo
	36,  // 129: hbb.Message.pointer_device_event:type_name -> hbb.PointerDeviceEvent
	23,  // 130: hbb.Message.auth_2fa:type_name -> hbb.Auth2FA
	43,  // 131: hbb.Message.multi_clipboards:type_name -> hbb.MultiClipboards
	132, // [132:132] is the sub-list for method output_type
	132, // [132:132] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	file_message_proto_msgTypes[4].OneofWrappers = []any{
		(*VideoFrame_Vp9S)(nil),
		(*VideoFrame_Rgb)(nil),
		(*VideoFrame_Yuv)(nil),
		(*VideoFrame_H264S)(nil),
		(*VideoFrame_H265S)(nil),
		(*VideoFrame_Vp8S)(nil),
		(*VideoFrame_Av1S)(nil),
	}
	file_message_proto_msgTypes[11].OneofWrappers = []any{
		(*LoginRequest_FileTransfer)(nil),
		(*LoginRequest_PortForward)(nil),
		(*LoginRequest_ViewCamera)(nil),
	}
	file_message_proto_msgTypes[19].OneofWrappers = []any{
		(*LoginResponse_Error)(nil),
		(*LoginResponse_PeerInfo)(nil),
	}
	file_message_proto_msgTypes[24].OneofWrappers = []any{
		(*TouchEvent_ScaleUpdate)(nil),
		(*TouchEvent_PanStart)(nil),
		(*TouchEvent_PanUpdate)(nil),
		(*TouchEvent_PanEnd)(nil),
	}
	file_message_proto_msgTypes[25].OneofWrappers = []any{
		(*PointerDeviceEvent_TouchEvent)(nil),
	}
	file_message_proto_msgTypes[27].OneofWrappers = []any{
		(*KeyEvent_ControlKey)(nil),
		(*KeyEvent_Chr)(nil),
		(*KeyEvent_Unicode)(nil),
		(*KeyEvent_Seq)(nil),
		(*KeyEvent_Win2WinHotkey)(nil),
	}
	file_message_proto_msgTypes[40].OneofWrappers = []any{
		(*FileAction_ReadDir)(nil),
		(*FileAction_Send)(nil),
		(*FileAction_Receive)(nil),
		(*FileAction_Create)(nil),
		(*FileAction_RemoveDir)(nil),
		(*FileAction_RemoveFile)(nil),
		(*FileAction_AllFiles)(nil),
		(*FileAction_Cancel)(nil),
		(*FileAction_SendConfirm)(nil),
		(*FileAction_Rename)(nil),
		(*FileAction_ReadEmptyDirs)(nil),
	}
	file_message_proto_msgTypes[42].OneofWrappers = []any{
		(*FileResponse_Dir)(nil),
		(*FileResponse_Block)(nil),
		(*FileResponse_Error)(nil),
		(*FileResponse_Done)(nil),
		(*FileResponse_Digest)(nil),
		(*FileResponse_EmptyDirs)(nil),
	}
	file_message_proto_msgTypes[47].OneofWrappers = []any{
		(*FileTransferSendConfirmRequest_Skip)(nil),
		(*FileTransferSendConfirmRequest_OffsetBlk)(nil),
	}
	file_message_proto_msgTypes[62].OneofWrappers = []any{
		(*Cliprdr_Ready)(nil),
		(*Cliprdr_FormatList)(nil),
		(*Cliprdr_FormatListResponse)(nil),
		(*Cliprdr_FormatDataRequest)(nil),
		(*Cliprdr_FormatDataResponse)(nil),
		(*Cliprdr_FileContentsRequest)(nil),
		(*Cliprdr_FileContentsResponse)(nil),
		(*Cliprdr_TryEmpty)(nil),
	}
	file_message_proto_msgTypes[79].OneofWrappers = []any{
		(*BackNotification_PrivacyModeState_)(nil),
		(*BackNotification_BlockInputState_)(nil),
	}
	file_message_proto_msgTypes[81].OneofWrappers = []any{
		(*ElevationRequest_Direct)(nil),
		(*ElevationRequest_Logon)(nil),
	}
	file_message_proto_msgTypes[89].OneofWrappers = []any{
		(*Misc_ChatMessage)(nil),
		(*Misc_SwitchDisplay)(nil),
		(*Misc_PermissionInfo)(nil),
		(*Misc_Option)(nil),
		(*Misc_AudioFormat)(nil),
		(*Misc_CloseReason)(nil),
		(*Misc_RefreshVideo)(nil),
		(*Misc_VideoReceived)(nil),
		(*Misc_BackNotification)(nil),
		(*Misc_RestartRemoteDevice)(nil),
		(*Misc_Uac)(nil),
		(*Misc_ForegroundWindowElevated)(nil),
		(*Misc_StopService)(nil),
		(*Misc_ElevationRequest)(nil),
		(*Misc_ElevationResponse)(nil),
		(*Misc_PortableServiceRunning)(nil),
		(*Misc_SwitchSidesRequest)(nil),
		(*Misc_SwitchBack)(nil),
		(*Misc_ChangeResolution)(nil),
		(*Misc_PluginRequest)(nil),
		(*Misc_PluginFailure)(nil),
		(*Misc_FullSpeedFps)(nil),
		(*Misc_AutoAdjustFps)(nil),
		(*Misc_ClientRecordStatus)(nil),
		(*Misc_CaptureDisplays)(nil),
		(*Misc_RefreshVideoDisplay)(nil),
		(*Misc_ToggleVirtualDisplay)(nil),
		(*Misc_TogglePrivacyMode)(nil),
		(*Misc_SupportedEncoding)(nil),
		(*Misc_SelectedSid)(nil),
		(*Misc_ChangeDisplayResolution)(nil),
		(*Misc_MessageQuery)(nil),
		(*Misc_FollowCurrentDisplay)(nil),
	}
	file_message_proto_msgTypes[92].OneofWrappers = []any{
		(*Message_SignedId)(nil),
		(*Message_PublicKey)(nil),
		(*Message_TestDelay)(nil),
		(*Message_VideoFrame)(nil),
		(*Message_LoginRequest)(nil),
		(*Message_LoginResponse)(nil),
		(*Message_Hash)(nil),
		(*Message_MouseEvent)(nil),
		(*Message_AudioFrame)(nil),
		(*Message_CursorData)(nil),
		(*Message_CursorPosition)(nil),
		(*Message_CursorId)(nil),
		(*Message_KeyEvent)(nil),
		(*Message_Clipboard)(nil),
		(*Message_FileAction)(nil),
		(*Message_FileResponse)(nil),
		(*Message_Misc)(nil),
		(*Message_Cliprdr)(nil),
		(*Message_MessageBox)(nil),
		(*Message_SwitchSidesResponse)(nil),
		(*Message_VoiceCallRequest)(nil),
		(*Message_VoiceCallResponse)(nil),
		(*Message_PeerInfo)(nil),
		(*Message_PointerDeviceEvent)(nil),
		(*Message_Auth_2Fa)(nil),
		(*Message_MultiClipboards)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_proto_rawDesc), len(file_message_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
